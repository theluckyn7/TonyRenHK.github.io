{"meta":{"title":"呆呆's blog","subtitle":null,"description":null,"author":"呆呆","url":"http://tonyrenhk.github.io"},"pages":[{"title":"项目","date":"2018-11-23T01:43:57.000Z","updated":"2019-04-11T09:59:18.461Z","comments":false,"path":"Project/index.html","permalink":"http://tonyrenhk.github.io/Project/index.html","excerpt":"","text":"项目列表News PostNews Post: Link Daily NoteDaily Note using Google App Script, DataBase is Google Drive Daily Note : Link 表急送表急送 : https://biaojisong.com AppExchange"},{"title":"SFDX 常用命令以及相关资料","date":"2019-01-01T16:00:00.000Z","updated":"2019-04-11T09:59:18.445Z","comments":true,"path":"Note/2024-01-02-Template.html","permalink":"http://tonyrenhk.github.io/Note/2024-01-02-Template.html","excerpt":"preview","text":"preview 微信网页版 Bitbucket 有道笔记 Trailhead 有道首页 Dillinger222 111 Dillinger is a cloud-enabled, mobile-ready, offline-storage, AngularJS powered HTML5 Markdown editor. Type some Markdown on the left See HTML in the right Magic New Features! Import a HTML file and watch it magically convert to Markdown Drag and drop images (requires your Dropbox account be linked) You can also: Import and save files from GitHub, Dropbox, Google Drive and One Drive Drag and drop markdown and HTML files into Dillinger Export documents as Markdown, HTML and PDF Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email. As John Gruber writes on the Markdown site Aura components can contain Lightning web components. However, the opposite doesn’t apply. Lightning web components can’t contain Aura components.formatting syntax is to make it as readableas possible. The idea is that aMarkdown-formatted document should bepublishable as-is, as plain text, withoutlooking like it’s been marked up with tagsor formatting instructions. This text you see here is actually written in Markdown! To get a feel for Markdown’s syntax, type some text into the left window and watch the results in the right. TechDillinger uses a number of open source projects to work properly: AngularJS - HTML enhanced for web apps! Ace Editor - awesome web-based text editor markdown-it - Markdown parser done right. Fast and easy to extend. Twitter Bootstrap - great UI boilerplate for modern web apps node.js - evented I/O for the backend Express - fast node.js network app framework @tjholowaychuk Gulp - the streaming build system Breakdance - HTML to Markdown converter jQuery - duh And of course Dillinger itself is open source with a public repository on GitHub. InstallationDillinger requires Node.js v4+ to run. Install the dependencies and devDependencies and start the server. 123$ cd dillinger$ npm install -d$ node app For production environments… 12$ npm install --production$ NODE_ENV=production node app PluginsDillinger is currently extended with the following plugins. Instructions on how to use them in your own application are linked below. Plugin README Dropbox plugins/dropbox/README.md Github plugins/github/README.md Google Drive plugins/googledrive/README.md OneDrive plugins/onedrive/README.md Medium plugins/medium/README.md Google Analytics plugins/googleanalytics/README.md DevelopmentWant to contribute? Great! Dillinger uses Gulp + Webpack for fast developing.Make a change in your file and instantanously see your updates! Open your favorite Terminal and run these commands. First Tab:1$ node app Second Tab:1$ gulp watch (optional) Third:1$ karma test Building for sourceFor production release:1$ gulp build --prod Generating pre-built zip archives for distribution:1$ gulp build dist --prod DockerDillinger is very easy to install and deploy in a Docker container. By default, the Docker will expose port 8080, so change this within the Dockerfile if necessary. When ready, simply use the Dockerfile to build the image. 12cd dillingerdocker build -t joemccann/dillinger:$&#123;package.json.version&#125; . This will create the dillinger image and pull in the necessary dependencies. Be sure to swap out ${package.json.version} with the actual version of Dillinger. Once done, run the Docker image and map the port to whatever you wish on your host. In this example, we simply map port 8000 of the host to port 8080 of the Docker (or whatever port was exposed in the Dockerfile): 1docker run -d -p 8000:8080 --restart=\"always\" &lt;youruser&gt;/dillinger:$&#123;package.json.version&#125; Verify the deployment by navigating to your server address in your preferred browser. 1127.0.0.1:8000 Kubernetes + Google CloudSee KUBERNETES.md Todos Write MORE Tests Add Night Mode LicenseMIT Free Software, Hell Yeah! Tables Are Cool col 1 is left-aligned $1600 col 2 is centered $12 col 3 is right-aligned $1"},{"title":"书签BookMark","date":"2018-12-06T01:43:57.000Z","updated":"2019-04-11T09:59:18.445Z","comments":false,"path":"Note/BookMark.html","permalink":"http://tonyrenhk.github.io/Note/BookMark.html","excerpt":"","text":"这里会列举一些常用的书签,和收录一些有用的工具。 工具教程学习链接To Do List 常用工具 微信网页版 微信公众号入口 腾讯文档 QQ邮箱 腾讯企业邮箱 有道笔记 有道词典 JSON To CSV Converter Quip Trailhead Heroku 海词词典 WhatsApp 百度网盘 Bing 词典 OneDrive Skype Cloud9 JavaScript beautifier 小米 Mi Cloud Github Bitbucket GitLab Trello MeisterTask 简书 其他 Twitter LinkedIn Salesforce Community Medium 简书 CSDN 微博 Quora Symbols &amp; Fancy Text Facebook YouTube Music Slack 知乎 基督教新生會 Spectrum Community CSDN Salesforce AppExchange Salesforce Brandstore Salesforce Community Top Trailblazers Salesforce Webinars Force Leader Board Global Salesforce Blogs trailhead leaderboard trailhead-board Salesforce工具 Salesforce Id conversion from 15 to 18 chars: https://www.adminbooster.com/tool/15to18 Toolkit for Salesforce Salesforce.com Field Creator 开发工具 Development Tools IDE salesforce IDE 设计Design Gitpod - Code Now ASIDE.IO 墨刀 原型设计与协同工具 Coder Gravit Designer Codeanywhere draw.io Cloud9 PhotopeaOnline Image Editor Droid Sans Fall 中文 Salesforce 文章博客 &amp; 学习资源 Source Jenwlee’s Salesforce Blog Douglas C. Ayers SimplySfdc.com The Accidental Admins TheBlogReaders.com - Salesforce.com Learn &amp; Share Salesforce Easy Learn Jitendra Zaa’s Blog xgeek : Think Simple &amp; Create Simple Exploring on Salesforce forcePanda Douglas C. Ayers – My journey with Salesforce and Technology Amit Salesforce Tutorial Kart Apex Hours Quizlet Andy in the Cloud Trailhead Leader Board sfdc在日華人交流会 Admin Booster - Salesforce.com administration forcePanda Forcetalks Salesforce Automation Hour SfdcNihonKajinStudy Pending to study Create Re-Usable Custom Lookup In Salesforce Lightning Component Reactive Programming with Salesforce Data | Heroku INSIGHTS_ PARDOT_ B2B MARKETING ANALYTICS ACCELERATOR LIVE: http://salesforce.vidyard.com/watch/GqnQBV2kZGUDvwcsxYQFeZ?* Library Shields.io: Quality metadata badges for open source projects Chosen HTML-CSS-JS Prettify - Packages - Package Control : https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify JavaScript Pivot Table ： https://www.webdatarocks.com/demos/javascript-pivot-table-demo/ Overview · ForceCode Github 开源库 meruff/trailhead-leaderboard A leaderboard to track your teams progress on Salesforce Trailhead. Demo at the link to my developer edition. forcedotcom/SiteCrawler : This is a Java library which can be used to crawl the content of some of web properties (www.salesforce.com, blogs.salesforce.com for example). It supports dynamic scaling (depending on available machine power (CPU, RAM) and network capacity) out of the box. It also has a Plugin structure, which allows others to write code (plugins) that act on the crawled pages. benedwards44/fieldcreator Ace - The High Performance Code Editor for the Web styfle/awesome-online-ide: 🌩️ A list of awesome online development environments Pending to Post How to pass record IDs from list view to a Flow in Lightning | forcePanda The Top 10 Things You Want to Know About the New Flow Builder - Salesforce Admins* IT Fast load times web.dev* Help Doc ExampleMemberNation User Guide - Confluence 素材图片 背景圖片免費下載攝影照片插畫_ppt 模板_zh.lovepik.com : https://zh.lovepik.com/ 万素网千万张psd模板免费下载国内正版免扣素材下载摄影图片高清背景图片 : http://669pic.com/ Vector Illustrations For Interface and UX Design Others MikeCRM Local Time Converters – TimeBie*"},{"title":"IT学习网站书签BookMark","date":"2018-12-06T01:43:57.000Z","updated":"2019-04-11T09:59:18.461Z","comments":false,"path":"Note/Tutorial.html","permalink":"http://tonyrenhk.github.io/Note/Tutorial.html","excerpt":"","text":"Main 掘金 - 帮助开发者成长的社区 : https://juejin.im/ freeCodeCamp.org: https://medium.freecodecamp.org/ DockOne.io : http://dockone.io/ 云栖社区-阿里云官方开发者社区 : https://yq.aliyun.com/ 开源中国 : https://www.oschina.net/ Top Shelf Web Development Training ― Scotch.io : https://scotch.io/ DEV Community 👩‍💻👨‍💻: https://dev.to/ 视频教程 发现课程 - 多贝公开课 网易公开课 Coursera edX 腾讯大讲堂 Salesforce Live Codecademy Google Cloud OnAir YouTube Salesforce Webinars eBooks IT eBooks - Free Download - New Releases: http://it-ebooks.info/ free-programming-books/free-programming-books-zh.md at master · EbookFoundation/free-programming-books: https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md justjavac/free-programming-books-zh_CN: 免费的计算机编程类中文书籍，欢迎投稿: https://github.com/justjavac/free-programming-books-zh_CN Salesforce Lightning Design System: https://www.lightningdesignsystem.com/ 教程 Salesforce Apex Code Corner: Export Data in CSV or Excel In Apex Salesforce: http://salesforceapexcodecorner.blogspot.com/2012/03/export-in-csv-and-excel-in-apex.html Journey to Lightning Experience Challenges Coderbyte | The #1 Website for Coding Challenges : https://coderbyte.com/ React React – A JavaScript library for building user interfaces: https://reactjs.org/ ReactJS Tutorial: https://www.tutorialspoint.com/reactjs/* IT Reading DEV Community Where software engineers connect, build their resumes, and grow.: https://dev.to/ 猴子都能懂的GIT入门 | 贝格乐（Backlog） UI Design 优设-UISDC: 优秀设计联盟-SDC-优设网-设计师交流学习平台-听讲座，聊设计，找素材，尽在优设网 : https://www.uisdc.com/ UI中国-专业用户体验设计平台 : https://www.ui.cn/ Hongkiat - Tech and Design Tips : https://www.hongkiat.com/blog/ Learn, Code and Share on Tutorialzine : https://tutorialzine.com/ CSS Lightning Design System: https://www.lightningdesignsystem.com/ Components - Salesforce Lightning Component Library: https://developer.salesforce.com/docs/component-library/overview/components Semantic UI : https://semantic-ui.com/ Dribbble - Discover the World’s Top Designers &amp; Creative Professionals 源码学习 ccoenraets/lightning-react-app: https://github.com/ccoenraets/lightning-react-app DjangoThe Web framework for perfectionists with deadlines | Django : https://www.djangoproject.com/ Git教程Pro Git 简体中文版: http://iissnan.com/progit/ IT Reading List:Hacker Noon: https://hackernoon.com/CSDN-专业IT技术社区 : https://www.csdn.net/V2EX: https://www.v2ex.com/Salesforce Developers Blog : https://developer.salesforce.com/blogs/Free Programming Books – GoalKicker.com: https://goalkicker.com/Fundebug博客: https://blog.fundebug.com/SegmentFault 思否: https://segmentfault.com/Salesforce Trailblazer Community : https://success.salesforce.com/Stack Overflow - Where Developers Learn, Share, &amp; Build Careers: https://stackoverflow.com/Blog Posts - Salesforce Admins: https://admin.salesforce.com/postsHTML Online Articles - Tips, tricks, tutorials…: https://html-online.com/articles/腾讯云 - 连接智能未来 : https://cloud.tencent.com/人人都是产品经理 | 产品经理、产品爱好者学习交流平台 : http://www.woshipm.com/The SitePoint Forums : https://www.sitepoint.com/community/"},{"title":"Online Tools在线工具","date":"2018-12-06T01:43:57.000Z","updated":"2019-04-11T09:59:18.445Z","comments":false,"path":"Note/OnlineTools.html","permalink":"http://tonyrenhk.github.io/Note/OnlineTools.html","excerpt":"","text":"微信公众号如下是一些编辑微信公众号的常用工具，其中这是微信公众号登入口。 【编辑器】135编辑器: https://www.135editor.com/ 【编辑器】96微信编辑器: http://bj.96weixin.com/ 【编辑器】365编辑器: https://www.365editor.com/ 【编辑器】秀米首页 - 秀米 XIUMI: https://xiumi.us/#/ 【编辑器】在线 Markdown 编辑器 - Dillinger: https://dillinger.io/ 简体转繁体：https://www.hao123.com/haoserver/jianfanzh.htm Online Markdown Converter(代码转换): http://md.ityouknow.com/ 【图片】一键复制黏贴照片工具：Snaggy - easy screenshots: https://snag.gy/ 【图片】Photoshop在线精简版: http://www.uupoop.com/ 素材中国_免费素材共享平台www.sccnn.com : http://www.sccnn.com/ 免费在线二维码生成器 : https://cn.online-qrcode-generator.com/ 在线二维码图片生成器 : http://www.liantu.com/ Word Code block 创客贴平面设计作图神器免费设计模板_在线稿定设计印刷 Md2All : http://md.aclickall.com/ Video to animated GIF converter : https://ezgif.com/video-to-gif 在线视频转GIF软件_视频转GIF在线制作工具_92素材网 : http://www.92sucai.com/gif/video.html Bitly | URL Shortener, Custom Branded URLs, API &amp; Link Management JavaScript工具 Online JavaScript beautifier: https://beautifier.io/ JSFiddle: https://jsfiddle.net/ CodePen : https://codepen.io/ 其他工具 Text Editor for Google Drive: http://texteditor.nsspot.net/* API工具 API Tester : https://apitester.com/* 软件下载 Apowersoft Screen Recorder - Download"},{"title":"","date":"2019-04-11T09:59:18.445Z","updated":"2019-04-11T09:59:18.445Z","comments":true,"path":"Note/Others.html","permalink":"http://tonyrenhk.github.io/Note/Others.html","excerpt":"","text":"Now Examples Programming Languages Example Demo Description Monorepo https://monorepo-v2.now.sh A Monorepo example using multiple programming languages Go https://go-v2.now.sh A simple GoLang example PHP 7 https://php7-v2.now.sh A simple PHP 7 example Python https://python-v2.now.sh A simple Python example Node.js https://nodejs-v2.now.sh A simple Node.js example Static https://static-example.now.sh A simple Static website example Elm https://create-elm-app-v2.now.sh An example Elm app created with create-elm-app Frameworks and Libraries Example Demo Description Next.js https://nextjs-v2.now.sh A Next.js example using SSR Next.js Static https://nextjs-static-v2.now.sh A Next.js Static exported example React https://cra-v2.now.sh An example created using Create React App Gatsby https://gatsby-v2.now.sh Gatsby getting started example using Gatsby CLI Vue https://vue-v2.now.sh Vue example using Vue CLI Vue SSR https://vue-ssr-v2.now.sh Vue example using server side rendering Vuepress https://vuepress-v2.now.sh A docs example using VuePress Nuxt Static https://nuxt-static-v2.now.sh A Nuxt Static exported example Express https://express-v2.now.sh An example using Express Apollo Server https://apollo-v2.now.sh An Apollo Server example using Express Markdown https://markdown-v2.now.sh A static website using Markdown and CSS MDX Deck https://mdx-deck-v2.now.sh A presentation using MDX Deck MDX Deck - Advanced https://advanced-mdx-deck.now.sh A presentation using MDX Deck with custom layout and React components HTML Minifier https://html-minifier-v2.now.sh A simple HTML minification example OptiPNG https://optipng-v2.now.sh A PNG optimize example using OptiPNG docz https://docz.now.sh A documentation example built with docz Gridsome https://gridsome.now.sh Vue-powered static site generated by Gridsome Zola https://zola.now.sh A static website uses Zola and builds a website with Rust in the cloud Puppeteer https://screenshot-v2.now.sh A Puppeteer based screenshot example Jekyll https://jekyll.now-examples.now.sh/ A ready-to-deploy Jekyll site, presetup to pick up and go. Fully Working Applications Example Demo Description Next News https://nextjs-news-v2.now.sh A Hacker News clone created with Next.js deployed to Now 2.0 Slack Eval https://serverless-eval.now.sh A serverless Slack app deployed to Now 2.0 Node Canvas https://ppaas.now.sh A Party Parrot generator built on node-canvas Twitter Dreamify with Express https://serverless-express.now.sh A serverless Express application that takes an authenticated Twitter user’s avatar and dreamifies it. Read the blog post on this example."},{"title":"To Do List","date":"2018-12-05T01:43:57.000Z","updated":"2019-04-11T09:59:18.461Z","comments":false,"path":"Note/To_Do_List.html","permalink":"http://tonyrenhk.github.io/Note/To_Do_List.html","excerpt":"","text":"Connect Components with Events Unit | Salesforce Trailhead : https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_events ✿✿✿文章Topic ✿✿✿Link : Sandbox Preview Instructions for the Salesforce Winter ‘19 Release - Salesforce Blog : https://www.salesforce.com/blog/2018/08/winter-19-release-sandbox-preview-instructions.html Salesforce Lightning application with Vue.js and Webpack — PART 1: https://medium.com/@ennoucas/creating-a-salesforce-application-with-vue-js-and-webpack-part-1-17c726484f1f Salesforce Lightning application with Vue.js and Webpack — PART 2: https://medium.com/@ennoucas/salesforce-lightning-application-with-vue-js-and-webpack-part-2-af0071347274 Running A Salesforce Aura App Locally And On Heroku | Developer Force Blog: https://developer.salesforce.com/blogs/developer-relations/2015/06/running-aura-app-heroku.html 10 Ways to Integrate with G Suite - Salesforce Live: https://www.salesforce.com/video/1779868/ Quip live app 学习入门 Quip Live Apps API Guide: https://tony-team.quip.com/dev/liveapps/ Blockchain at Dreamforce 2018 – Phil Komarny – Medium: https://medium.com/@philkomarny/blockchain-at-dreamforce-2018-7288ce7dee12 Salesforce API Reference: https://developer.salesforce.com/docs/api-explorer/sobject/Account https://www.quipsupport.com/hc/en-us/articles/115001153906-How-do-I-use-Quip-Connect- https://www.v2force.com/connected-apps/ Try Einstein Analytics free for 30 days - Salesforce Blog : https://www.salesforce.com/blog/2019/02/einstein-analytics-free-trial.html http://www.apexhours.com/introduction-to-lightning-web-components-lwc/ Build a Bear-Tracking App with Lightning Web Components | Salesforce : https://trailhead.salesforce.com/content/learn/projects/lwc-build-flexible-apps Setting Up Jenkins for Force.com Continuous Integration | Developer Force Blog : https://developer.salesforce.com/blogs/developer-relations/2013/03/setting-up-jenkins-for-force-com-continuous-integration.html (92) Introduction to Salesforce Authenticator - YouTube : https://www.youtube.com/watch?v=mDihoAnWrUk https://twitter.com/asksalesforce/status/1090987839377027073Quip - How Workflow Therapy can change the way your team works together LWC http://amitsalesforce.blogspot.com/2019/01/how-to-get-current-user-id-in-lightning-web-components.html"},{"title":"微信","date":"2018-11-23T01:43:57.000Z","updated":"2019-04-11T09:59:18.461Z","comments":false,"path":"Wechat/index.html","permalink":"http://tonyrenhk.github.io/Wechat/index.html","excerpt":"","text":"微信微信号微信号:kun_stylehk 微信公众号微信公众号 : Salesforce考试 表急送服务号公众号搜索“表急送”"},{"title":"关于我","date":"2018-11-23T01:59:12.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"about/index.html","permalink":"http://tonyrenhk.github.io/about/index.html","excerpt":"","text":"关于我本站本站建立于2018年11月。利用如下： Node.js框架Hexo 主题 Material-X 评论Valine 同时，部署于Github上。 我我就没什么好写的了。 我是谁码农分享者SFDC学习者 我会啥SalesforcePythonJavaScript 我在学啥微信小程序NodejsReactjsQuip开发… 联系我 邮件：renchk@foxmail.com 微信：点这里。 未来计划未来计划在博客里面加入如下信息 心知天气 : https://www.seniverse.com/ 加入lightningdesignsystem的bookmarks 加入金山词霸词典 声明本站提供的任何代码示例纯粹用于实验和学习目的，不提供任何保证或支持。本站的主要目的是分享知识和我个人的经验于学习历程。同时，部分公众号文章会经过本站的markdown排版之后发表。如果使用相关代码和本站内提及的有关方法，需要您自担风险。如果您有任何疑问或代码有任何问题，请随时与我联系（renchk@foxmail.com），或在下方留言。谢谢。"},{"title":"hexo-theme-doc主题实现中文搜索","date":"2018-11-26T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"about/Temp.html","permalink":"http://tonyrenhk.github.io/about/Temp.html","excerpt":"","text":"Guide Users Through Your Business Processes with Cloud Flow Designerhttps://trailhead.salesforce.com/content/learn/modules/business_process_automation/flow 题目Guide users through creating a leadBuild a flow that creates a lead with user-entered information and uploads a related file for the lead. Then add the flow to a Home page. Challenge Requirements: Create a flow: Name: New Lead Type: Screen Flow In the flow, add a screen with these required screen fields. Last Name Company Name In the flow, create a lead record. Use the screen fields to set the lead’s Last Name and Company.Store the lead’s ID in a Text variable called leadId. In the flow, add another screen with a Lightning component screen field. Name the field Upload_File Choose the forceContent:fileUpload Lightning component. Use the leadId variable to set the component’s Related Record ID attribute. Activate the New Lead flow. Create a new Lightning page: Type: Home page Label: Process Automation Home In Process Automation Home, add a Flow component that references the New Lead flow. Activate the page and set it as the default Home page."}],"posts":[{"title":"Trailhead 相关资料和答案","slug":"2019-09-01-Trailhead","date":"2019-08-31T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/09/01/2019-09-01-Trailhead/","link":"","permalink":"http://tonyrenhk.github.io/2019/09/01/2019-09-01-Trailhead/","excerpt":"【Trailhead】App Customization Lite答案【Trailhead】Account Data Strategies答案【Trailhead】Artificial Intelligence Basics 答案【Trailhead】API Basics答案","text":"【Trailhead】App Customization Lite答案【Trailhead】Account Data Strategies答案【Trailhead】Artificial Intelligence Basics 答案【Trailhead】API Basics答案 【Trailhead】App Customization Lite答案https://trailhead.salesforce.com/content/learn/modules/lex_migration_customization Customize the User Interfacehttps://trailhead.salesforce.com/content/learn/modules/lex_migration_customization/lex_migration_customization_layouts_ui https://trailhead.salesforce.com/content/learn/modules/lex_migration_customization/lex_migration_customization_actions Understand How Actions Work in Lightning Experiencehttps://trailhead.salesforce.com/content/learn/modules/lex_migration_customization/lex_migration_customization_actions 【Trailhead】Account Data Strategies答案Account Data Strategieshttps://trailhead.salesforce.com/content/learn/modules/account-data-strategies Use Data to Get a 360-Degree View of Your Customershttps://trailhead.salesforce.com/content/learn/modules/account-data-strategies/use-data-to-get-a-360-degree-view-of-your-customers Develop a Data-Backed Account Management Strategyhttps://trailhead.salesforce.com/content/learn/modules/account-data-strategies/develop-a-data-backed-account-management-strategy #【Trailhead】Artificial Intelligence Basics 答案 Artificial Intelligence Basicshttps://trailhead.salesforce.com/content/learn/modules/ai_basics Learn AI Fundamentalshttps://trailhead.salesforce.com/content/learn/modules/ai_basics/ai_basics_getstarted Discover the Science Behind AIhttps://trailhead.salesforce.com/content/learn/modules/ai_basics/ai_basics_discover 【Trailhead】API Basics答案API Basics今天入门学习API Basics，相关链接如下： https://trailhead.salesforce.com/content/learn/modules/pw-api-basics Make APIs for You and Mehttps://trailhead.salesforce.com/content/learn/modules/pw-api-basics/make-apis-for-you-and-me Learn the Benefits of APIshttps://trailhead.salesforce.com/content/learn/modules/pw-api-basics/learn-the-benefits-of-apis Put the Web in Web APIhttps://trailhead.salesforce.com/content/learn/modules/pw-api-basics/put-the-web-in-web-api","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Trailhead","slug":"Trailhead","permalink":"http://tonyrenhk.github.io/tags/Trailhead/"}]},{"title":"Library NPM 软件安装包","slug":"2019-04-02-LibraryNPM","date":"2019-04-01T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/04/02/2019-04-02-LibraryNPM/","link":"","permalink":"http://tonyrenhk.github.io/2019/04/02/2019-04-02-LibraryNPM/","excerpt":"软件安装包","text":"软件安装包 hexoReference: https://hexo.io/ https://xaoxuu.com/wiki/material-x/ https://github.com/xaoxuu/hexo-theme-material-x 123456789101112131415 npm install hexo-cli -g npm install hexo --save npm install hexo-deployer-git --save npm install hexo-deployer-heroku --savenpm i -S hexo-generator-search hexo-generator-feed hexo-renderer-less hexo-autoprefixer hexo-generator-json-content hexo-recommended-postsnpm audit fix --forcenpm installgit clone https://tonyrenhk:password@github.com/TonyRenHK/hexo-theme-material-x.git themes/material-x jSForce deployment1npm install jsforce-metadata-tools -g HerokuReference:https://devcenter.heroku.com/articles/git#http-git-authentication https://devcenter.heroku.com/articles/heroku-cli 12345678npm install -g herokuheroku login -iheroku: Enter your login credentialsEmail: me@example.comPassword: ***************Two-factor code: ********Logged in as me@heroku.com","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://tonyrenhk.github.io/categories/JavaScript/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://tonyrenhk.github.io/tags/JavaScript/"}]},{"title":"Quip相关资料","slug":"2019-03-18-Quip","date":"2019-03-17T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/03/18/2019-03-18-Quip/","link":"","permalink":"http://tonyrenhk.github.io/2019/03/18/2019-03-18-Quip/","excerpt":"【Trailhead】如何在Quip中打开Salesforce报表？","text":"【Trailhead】如何在Quip中打开Salesforce报表？ 今天带大家学习如何把Salesforce report在Quip中打开，其好处可以通过Quip的Spreadsheet很方便地实现数据编辑，并且添加相关公式。同时可以实现数据实时地传输到Quip中。 #注册Quip首先需要注册一个Quip。相关链接为：https://quip.com/account/login #安装官方的安装包需要安装光的安装包Quip Connect for Salesforce App到您的Org里面。安装链接如下：https://appexchange.salesforce.com/listingDetail?listingId=a0N3A00000EFoIbUAL #新建报表之后需要新建报表，点击Tab:Reports,选择您需要的对象，并设置一些Filters ，然后保存。 #在Quip中打开Salesforce报表找到Tab： Open Reports in Quip，选择您需要打开的报表，点击’Open in Quip.’。 所谓的静态数据，也就是当时使用者点击’Open in Quip.’所生成的报表的数据。如果之后报表里面又有新加的数据，是不会反映在之后的Quip文档中。选择Spreadsheet，之后的Quip文档可以修改，如果选择Live Data，之后的Quip文档中的报表部分是只读格式。 推荐阅读如下Trailhead文章：Quick Start: Quip and Salesforce Integration https://trailhead.salesforce.com/content/learn/projects/quick-start-quip-and-salesforce-integration","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Quip","slug":"Quip","permalink":"http://tonyrenhk.github.io/tags/Quip/"}]},{"title":"Community Cloud相关资料","slug":"2019-03-13-Community-Cloud","date":"2019-03-12T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/03/13/2019-03-13-Community-Cloud/","link":"","permalink":"http://tonyrenhk.github.io/2019/03/13/2019-03-13-Community-Cloud/","excerpt":"Community Cloud相关资料","text":"Community Cloud相关资料 Community Cloud Cert Fast PathRecordings and slide decks :ACCESS CODE for the videos : CCFastPath February 2019 Kick off + Communities basics (11/02/2019) : recording / slide deck Community builder (12/02/2019) : recording / slide deck Sharing and visibility (13/02/2019) : recording / slide deck Licenses and user provisioning (14/02/2019) : recording / slide deck Lightning Bolts and Content (15/02/2019) : recording / slide deck March 2019 Kick off + Communities basics (06/03/2019) : recording / slide deck Community builder (07/03/2019) : recording / slide deck Sharing and visibility (19/03/2019) : recording / slide deck Licenses and user provisioning (20/03/2019) : recording / slide deck Lightning Bolts and Content (22/03/2019) : recording / slide deck Trailheadhttps://trailhead.salesforce.com/content/learn/modules/community_cloud_basics/communities_intro_to_community_cloud 【Trailhead】Community Cloud 答案Community Cloud Basics(https://trailhead.salesforce.com/content/learn/modules/community_cloud_basics) Get Started with Community Cloudhttps://trailhead.salesforce.com/content/learn/modules/community_cloud_basics/communities_intro_to_community_cloud Engage with Your Customershttps://trailhead.salesforce.com/content/learn/modules/community_cloud_basics/communities_setting_goals_for_community Engage with Your Partnershttps://trailhead.salesforce.com/content/learn/modules/community_cloud_basics/communities_partner_community Engage with Your Employeeshttps://trailhead.salesforce.com/content/learn/modules/community_cloud_basics/communities_employee_community 其他资源：Setup Salesforce Community (Part 1) - YouTube : https://www.youtube.com/watch?v=bowKDMQOzHs An Introduction to Lightning Communities &amp; Community Builder - YouTube : https://www.youtube.com/watch?v=mwdgueihnXA","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Community Cloud","slug":"Community-Cloud","permalink":"http://tonyrenhk.github.io/tags/Community-Cloud/"}]},{"title":"利用LWC新建一个Bear-Tracking App","slug":"2019-03-12-BuildABear-Tracking-App-withLWC","date":"2019-03-11T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/03/12/2019-03-12-BuildABear-Tracking-App-withLWC/","link":"","permalink":"http://tonyrenhk.github.io/2019/03/12/2019-03-12-BuildABear-Tracking-App-withLWC/","excerpt":"Build a Bear-Tracking App with Lightning Web Components","text":"Build a Bear-Tracking App with Lightning Web Components 项目为Build a Bear-Tracking App with Lightning Web Components，相关链接为： https://trailhead.salesforce.com/content/learn/projects/lwc-build-flexible-apps Create a Hello World Lightning Web Component Work with a Single Record相关链接为：https://trailhead.salesforce.com/content/learn/projects/lwc-build-flexible-apps/single-record Work with Lists of Records相关链接为：https://trailhead.salesforce.com/content/learn/projects/lwc-build-flexible-apps/record-list Create a Child Component and Interact with It相关链接为：https://trailhead.salesforce.com/content/learn/projects/lwc-build-flexible-apps/composition code:https://gitlab.com/renchk/create-a-child-component-and-interact-with-it2 Communicate with Components Across an App相关链接为：https://trailhead.salesforce.com/content/learn/projects/lwc-build-flexible-apps/inter-comp-events 全剧终：","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"LWC","slug":"LWC","permalink":"http://tonyrenhk.github.io/tags/LWC/"},{"name":"Lightning Web Components","slug":"Lightning-Web-Components","permalink":"http://tonyrenhk.github.io/tags/Lightning-Web-Components/"}]},{"title":"Salesforce入门资源","slug":"2019-03-07-Get_Start_SFDC","date":"2019-03-06T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/03/07/2019-03-07-Get_Start_SFDC/","link":"","permalink":"http://tonyrenhk.github.io/2019/03/07/2019-03-07-Get_Start_SFDC/","excerpt":"Hands-on introduction to Salesforce","text":"Hands-on introduction to Salesforce For those who is interested in Salesforce development, or who needs to take part. There are quite a lots of online self-learning resources provided by SFDC, they are available at https://trailhead.salesforce.comI pick some “must have” modules that you can start with and shouldn’t miss them. Learn Salesforce with TrailheadRegister a “trailhead” playground for tutorials(You can use your personal email address to register, as you can complete every tutorial and badge yourself)https://trailhead.salesforce.com/trails/learn_salesforce_with_trailhead Sell Lightning Fast with Sales CloudIntroduce SFDC “Sales Cloud” on business user perspective, that helps you to understand what and why and how we are going to do.https://trailhead.salesforce.com/trails/lex_end_user Admin BeginnerSystem administration perspective on configurationhttps://trailhead.salesforce.com/trails/force_com_admin_beginner Developer BeginnerSystem administration / Developer perspective on customizationhttps://trailhead.salesforce.com/trails/force_com_dev_beginner Lightning DevelopmentDeveloper perspective on customization, specifically on LEX developmenthttps://trailhead.salesforce.com/trails/force_com_dev_intermediate/modules/lex_dev_lc_basics Best practicesApex Coding Best Practices (Must Read)https://developer.salesforce.com/page/Apex_Code_Best_Practices Apex Trigger Best Practiceshttps://developer.salesforce.com/page/Trigger_Frameworks_and_Apex_Trigger_Best_Practices Useful Tools, Tricks &amp; ReferenceTrailhead | The fun way to learn Salesforcehttps://trailhead.salesforce.com/ Workbench is a powerful, web-based suite of tools designed for administrators and developers to interact with Salesforce.com organizations via the Force.com APIshttps://workbench.developerforce.com More Salesforce Toolshttps://developer.salesforce.com/page/Tools AppExchange is the Salesforce store. Our ready-to-install enterprise solutions let you extend Salesforce with business apps and components for every department and industry, including sales, marketing, customer service, and more.https://appexchange.salesforce.com Lightning Pre-fill formhttp://www.salesforceben.com/migrate-your-salesforce-url-hacks-to-actions/ Salesforce Lightning for Gmail - Chrome Web Storehttps://chrome.google.com/webstore/detail/salesforce-lightning-for/jjghhkepijgakdammjldcbnjehfkfmha A hands-on blog for SFDChttp://www.salesforceben.com/ Extension to add a metadata layout on top of the standard Salesforce UI to improve the productivity and joy of Salesforce configuration, development, and integration work (MUST HAVE)https://chrome.google.com/webstore/detail/salesforce-inspector/aodjmnfhjibkcdimpodiifdjnnncaafh?hl=en","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"入门","slug":"入门","permalink":"http://tonyrenhk.github.io/tags/入门/"}]},{"title":"Lightning 的数据服务基础篇","slug":"2019-02-21-Lightning-Data-Service-Basics","date":"2019-02-20T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/02/21/2019-02-21-Lightning-Data-Service-Basics/","link":"","permalink":"http://tonyrenhk.github.io/2019/02/21/2019-02-21-Lightning-Data-Service-Basics/","excerpt":"Lightning Data Service Basics","text":"Lightning Data Service Basics 解锁Lightning Component Framework Specialist Superbadge，总框架如下 :https://trailhead.salesforce.com/en/content/learn/superbadges/superbadge_lcf Lightning Data Service Basics,相关链接：https://trailhead.salesforce.com/en/content/learn/modules/lightning_data_service Get Started with Lightning Data Service相关链接：https://trailhead.salesforce.com/content/learn/modules/lightning_data_service/lightning_data_service_get_started Manipulate Records with force:recordData相关链接：https://trailhead.salesforce.com/content/learn/modules/lightning_data_service/lightning_data_service_manipulate_records Handle Record Changes and Errors相关链接：https://trailhead.salesforce.com/content/learn/modules/lightning_data_service/lightning_data_service_handle_notifications","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Trailhead","slug":"Trailhead","permalink":"http://tonyrenhk.github.io/tags/Trailhead/"},{"name":"开发者II考试","slug":"开发者II考试","permalink":"http://tonyrenhk.github.io/tags/开发者II考试/"},{"name":"Lightning Components","slug":"Lightning-Components","permalink":"http://tonyrenhk.github.io/tags/Lightning-Components/"}]},{"title":"Lightning Web Components入门(二)","slug":"2019-02-17-Lightning-Web-Components-Basics","date":"2019-02-16T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/02/17/2019-02-17-Lightning-Web-Components-Basics/","link":"","permalink":"http://tonyrenhk.github.io/2019/02/17/2019-02-17-Lightning-Web-Components-Basics/","excerpt":"Lightning Web Components Basics：LWC的入门基础篇","text":"Lightning Web Components Basics：LWC的入门基础篇 今天学习Lightning Web Components Basics的入门，相关链接为 https://trailhead.salesforce.com/en/content/learn/modules/lightning-web-components-basics Discover Lightning Web Components：LWC到底是什么？ 下面这个简单的例子当初告诉你答案。LWC分为三个部分组成，HTML,JS,CSS。 HTML样式如下：123&lt;template&gt; &lt;input value=&#123;message&#125;&gt;&lt;/input&gt;&lt;/template&gt; 上面是基本的HTML组件，并且由HTML封装。 JavaScript样式如下： 1234import &#123; LightningElement &#125; from 'lwc';export default class App extends LightningElement &#123; message = 'Hello World';&#125; 通过JS控制相关的变量CSS样式如下 123input &#123; color: blue;&#125; 如果有HTML基础的同学，对于LWC上手应该不难。 推荐Trailhead学习链接为:https://trailhead.salesforce.com/content/learn/modules/lightning-web-components-basics/discover-lightning-web-components 下面是相关习题： 答案:注意CSS不是LWC的必须选项，所以答案是B 答案:官方推荐的playground://developer.salesforce.com/docs/component-library/tools/playground，答案是A Create Lightning Web Components相关链接为:https://trailhead.salesforce.com/content/learn/modules/lightning-web-components-basics/create-lightning-web-components D B Push Lightning Web Component Files相关链接为:https://trailhead.salesforce.com/en/content/learn/modules/lightning-web-components-basics/push-lightning-web-component-files 挑战： 首先新建项目： 12$ sfdx force:project:create --projectname bikeproject$ cd bikeproject 新建一个LWC1$ sfdx force:lightning:component:create --type lwc -n bikeCard -d force-app/main/default/lwc 复制文中代码到你的LWC。 将本地连入你的developer org：1sfdx force:auth:web:login -d -a myhuborg 然后部署过去：1sfdx force:source:deploy -p force-app -u &lt;username&gt; 参考链接如下： https://developer.salesforce.com/docs/component-library/documentation/lwc/lwc.get_started_sfdx_deploy Handle Events in Lightning Web Components相关链接：https://trailhead.salesforce.com/content/learn/modules/lightning-web-components-basics/handle-events-in-lightning-web-components A C Add Styles and Data to a Lightning Web Component相关链接：https://trailhead.salesforce.com/content/learn/modules/lightning-web-components-basics/add-styles-and-data-to-a-lightning-web-component","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"LWC","slug":"LWC","permalink":"http://tonyrenhk.github.io/tags/LWC/"},{"name":"SFDX","slug":"SFDX","permalink":"http://tonyrenhk.github.io/tags/SFDX/"},{"name":"Lightning Web Components","slug":"Lightning-Web-Components","permalink":"http://tonyrenhk.github.io/tags/Lightning-Web-Components/"}]},{"title":"常用快捷键shortcut收录","slug":"2019-01-11-shortcut","date":"2019-01-10T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/01/11/2019-01-11-shortcut/","link":"","permalink":"http://tonyrenhk.github.io/2019/01/11/2019-01-11-shortcut/","excerpt":"常用快捷键shortcut收录.","text":"常用快捷键shortcut收录. VS Code Command Palette : Ctrl+Shift+P Open terminal: Ctrl+J Code Formatting Shortcut: VSCode on Windows - Shift + Alt + F VSCode on MacOS - Shift + Option + F VSCode on Ubuntu - Ctrl + Shift + I Sublime 查询文件： Goto Anything feature (Ctrl+P on Windows and Linux, Cmd+P on macOS) or Ctrl+R,Cmd+R on macOS) Package Manager: Ctrl+Shift+P or Cmd+Shift+P in Linux/Windows/OS X Goto Anything feature Ctrl +`P Sublime-HTMLPrettify victorporof/Sublime-HTMLPrettify: https://github.com/victorporof/Sublime-HTMLPrettify Ctrl+Shift+H (or Cmd+Shift+H if you’re on a Mac). Atom Beautify 【Keyboard Shortcut】 You can also type Ctrl+Alt+B as a shortcut or click Packages &gt; Beautify in the menu. SSH shell You can type exit and hit Enter, or use Ctrl+D","categories":[{"name":"Tools","slug":"Tools","permalink":"http://tonyrenhk.github.io/categories/Tools/"}],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://tonyrenhk.github.io/tags/Tools/"},{"name":"shortcut","slug":"shortcut","permalink":"http://tonyrenhk.github.io/tags/shortcut/"}]},{"title":"Lightning Web Components学习入门(一)","slug":"2019-01-06-Lightning-Web-Components","date":"2019-01-05T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/01/06/2019-01-06-Lightning-Web-Components/","link":"","permalink":"http://tonyrenhk.github.io/2019/01/06/2019-01-06-Lightning-Web-Components/","excerpt":"学习Lightning Web Components(LWC) ，其中需要使用到SFDX。","text":"学习Lightning Web Components(LWC) ，其中需要使用到SFDX。 现在可以用Lightning Web Components(业内简称LWC)和 Aura Components开发相关的Lightning components。两者都可以相互存在同一个页面下面。LWC是基于传统的HTML和现代的JavaScript进行开发，其主要内核是基于w3c的webcomponents相关开源源码：https://github.com/w3c/webcomponents/ 所以，大部分的代码是基于标准的HTML和JS。同时，支持使用 JavaScript Jest测试(https://jestjs.io/) 设置开发环境安装Salesforce CLI安装CLI如果你的电脑里已经安装了nodejs，可以直接通过npm进行安装1npm install sfdx-cli --global 或者参考官方安装方法：https://developer.salesforce.com/docs/atlas.en-us.sfdx_setup.meta/sfdx_setup/sfdx_setup_install_cli.htm 查看CLI版本1$ sfdx plugins --core 由于使用LWC需要sfdx 45以上的版本，所以我们需要对sfdx版本进行更新。 更新至最新的版本在2019年3月以前需要安装pre-release版本1sfdx plugins:install salesforcedx@pre-release 在2019年3月之后可以直接卸载pre-release版本，并且输入：sfdx update进行安装。12sfdx plugins:uninstall salesforcedxsfdx update IDE由于LWC无法在Developer Console打开，所以需要使用外部IDE进行开发。 官方的playground:为了方便测试，官方给出了在线版的playground，如下：https://developer.salesforce.com/docs/component-library/tools/playground Visual Studio Code (VS Code)：https://code.visualstudio.com/ VS Code的Salesforce 开发插件 Salesforce Extension Pack for Visual Studio Code，https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode Ligthning Web Components for Visual Studio Code，这个是基于VS Code的LWC开发插件，比较实用，而且具有自动填补功能，建议开发人员下载使用。 安装下载地址：https://marketplace.visualstudio.com/items?itemName=salesforce.salesforcedx-vscode-lwc 源码下载地址：https://github.com/forcedotcom/salesforcedx-vscode ESLint Extension for VS Code，这个插件能够在未编译前，发现你在开发过程中的错误，https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint SalesforceXyTools：此IDE也支持LWC独立开发 安装使用教程如下：http://salesforcexytools.com/Salesforce/SalesforceXyTools-For-Sublime.html 源码如下：https://github.com/exiahuang/SalesforceXyTools 申请免费的试用Spring ’19 组织如果你是Salesforce的客户，你可以使用如下链接进行注册：https://www.salesforce.com/form/signup/prerelease-spring19.jsp如果你是Salesforce的Partner，你可以使用如下链接进行注册：https://www.salesforce.com/form/signup/prerelease-spring19-partner.jsp 兼容性问题根据官方的说法： Aura components can contain Lightning web components. However, the opposite doesn’t apply. Lightning web components can’t contain Aura components. Aura组件可以使用LWC作为一个组件，反过来，LWC里面不能包含Aura组件。但是JavaScript Code，可以在两边相互共享使用。 开发流程目前有两种开发流程，一种是在IDE上直接开发，然后部署至沙盒环境。另外一种是使用Scratch Orgs，具体流程可以如下 用SFDX 连入你的生产环境组织 新建一个Scratch Orgs 利用VS Code在本地开发LWC 将LWC推送至新建的Scratch Orgs进行查看，预览和测试 用SFDX 连入你的沙盒环境 将本地的LWC转成元数据 部署元数据至你的沙盒环境进行查看，预览和测试 实例使用 Dev Hub在设置(Setup),搜索’Dev Hub’,并且点Enable。只有打开Dev Hub才可以新建和使用Scratch Org。 新建DX项目首先需要新建一个 Salesforce DX 项目，下面例子中的mywork可以换成你的项目名字如‘HelloWorld’ 1sfdx force:project:create --projectname mywork 登入Salesforce 组织首先需要登入你的1sfdx force:auth:web:login -d -a DevHub 授权登入沙盒环境: 1sfdx force:auth:web:login -r https://test.salesforce.com 或者可以添加新的Sandbox Login 1$ sfdx force:auth:web:login -r https://test.salesforce.com -d -a DevHub 登入之后，会跳转到Salesforce授权页面，开发者需要在浏览器页面授权 查看你所拥有的Org123456789101112sfdx force:org:list=== Orgs ALIAS USERNAME ORG ID CONNECTED STATUS ----------- -------------------- -------- ---------------- DD-ORG jdoe@dd-204.com 00D...OEA Connected(D) devhuborg jdoe@mydevhub.com 00D...MAC Connected ALIAS SCRATCH ORG NAME USERNAME ORG ID EXPIRATION DATE ---------- ------------ -------------------------- --------- ---------- my-scratch Your Company test-wvkm5z113@example.com 00D...UAI 2017-06-13(U) scratch208 Your Company test-wvkm5z113@example.com 00D...UAY 2017-06-13 这里顺便教几个小技巧，如果需要删除non-active 的Scratch Org，可以输入如下命令行 1sfdx force:org:list --clean 设置默认的 Dev Hub，可以输入如下命令行，新建新的Scratch Org需要生产环境，所以需要把默认的 Dev Hub设置为你的生产环境 1sfdx force:config:set defaultdevhubusername=org@username.com --global 新建一个Scratch Org开发者需要利用项目文件夹中的配置文件新建一个Scratch Org123sfdx force:org:create -s -f config/project-scratch-def.json -a dreamhouse-orgorsfdx force:org:create -f config/project-scratch-def.json 如新建成功，会有如下成功的结果并给出用户名: 1Successfully created scratch org: 00XXX0000009PENEA2, username: test-XXXX@example.com 开发者利用用户名可以登入这个Scratch Org，如果需要删除一个某一个Scratch Org，可以输入如下命令行： 1$ sfdx force:org:delete -u test-XXXX@example.com 设置默认的用户名开发者需要设置默认的用户名defaultusername，这里设置之后，在下面打开Scratch Org时候可以不需要输入。 12345$ sfdx force:config:set defaultusername=test-XXXX@example.com=== Set ConfigNAME VALUE─────────────── ─────────────────────────────defaultusername test-XXXX@example.com 打开Scratch Org当开发者建立好了Scratch Org，可以利用默认的用户名打开Scratch Org，12$ sfdx force:org:openAccess org 00D0l00ddd as user test-XXXX@example.com with the following URL: https://force-data-1039-dev-ed.cs58.my.sxxxx.com alesforce.com//secur/frontdoor.jsp?sid=00D0l0000009PEN!ARoAQCCFPl.pwPYTXXNszi9rR0Q6CMrJc77771yynXH.jbnJbweH5b19bc_6KXo9BkMtMY1PLz_nY BO9SSEOyQnPnCWAU3gP 如果没有设置默认的用户名，可以在命令行中指定某一个用户名：1sfdx force:org:open -u test-phvqjvms7dsj@example.com 新建 Lightning Web Component(LWC)首先需要新建LWC在如下路径force-app/main/default/lwc，同时文件夹是以lwc为命名. 然后创建LWC12cd force-app/main/default/lwcsfdx force:lightning:component:create --type lwc -n helloWorld -d force-app/main/default/lwc 在LWC文件夹下会见到一个名字为helloWorld的文件夹，里面有三个文件helloWorld.html，helloWorld.js，helloWorld.js-meta.xml 其中helloWorld.html是我们熟悉的HTML文件，设置一个input，然后当有输入时候，调用JS函数。 12345678&lt;template&gt; &lt;lightning-card title=\"HelloWorld\" icon-name=\"custom:custom14\"&gt; &lt;div class=\"slds-m-around_medium\"&gt; &lt;p&gt;Hello, &#123;greeting&#125;!&lt;/p&gt; &lt;lightning-input label=\"Name\" value=&#123;greeting&#125; onchange=&#123;changeHandler&#125;&gt;&lt;/lightning-input&gt; &lt;/div&gt; &lt;/lightning-card&gt;&lt;/template&gt; 在helloWorld.js文件中是JavaScript代码。设置greeting的默认值为’World’，当有输入值修改时，将修改值赋予greeting。 1234567import &#123; LightningElement, track &#125; from 'lwc';export default class HelloWorld extends LightningElement &#123; @track greeting = 'World'; changeHandler(event) &#123; this.greeting = event.target.value; &#125;&#125; 最后是XML文件helloWorld.js-meta.xml，这里定义API版本和是否需要在其他LWC显示出来，同时，开发人员可以设置LWC应用于lightning App Page，lightning Record Page，lightning Home Page。12345678910&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;LightningComponentBundle xmlns=\"http://soap.sforce.com/2006/04/metadata\" fqn=\"helloWorld\"&gt; &lt;apiVersion&gt;45.0&lt;/apiVersion&gt; &lt;isExposed&gt;true&lt;/isExposed&gt; &lt;targets&gt; &lt;target&gt;lightning__AppPage&lt;/target&gt; &lt;target&gt;lightning__RecordPage&lt;/target&gt; &lt;target&gt;lightning__HomePage&lt;/target&gt; &lt;/targets&gt;&lt;/LightningComponentBundle&gt; 推送本地修改至Scratch Org当开发者在本地修改或者新建LWC完毕之后，需要推送有关代码到Scratch Org1sfdx force:source:push 在lightning Home Page使用LWC 打开Scratch Org，选择Sales App或者选择‘Home’ Tab。 选择‘Edit Page’ ，编辑当前lightning主页。 在右边的custom 栏目中拖曳helloWorld LWC 到中间的 组件位置。 保存并查看。 新建元数据package首先可以新建文件夹mdapi_output_dir： 1$ mkdir mdapi_output_dir 其次，创建package，这个package之后会在部署时候运用到： 12$ sfdx force:source:convert -d mdapi_output_dir/ --packagename package_nameSource was successfully converted to Metadata API format and written to the location: C:\\Users\\Administrator\\my_sfdx_project\\dreamhouse-sfdx\\mdapi_output_dir 这里附上一些小技巧，如下命令行可以查看有什么改变： 1$ ls -lR mdapi_output_dir/ 部署最后我们需要将上面生成的含有package的文件夹部署至指定目录，可以部署目录至沙盒环境或者生产环境，同时开发者可以定义需要跑的测试类 ： 1sfdx force:mdapi:deploy -d mdapioutput_dir/ -u &quot;sandbox_username&quot; -l RunSpecifiedTests -r test1,test2,test3,test4 或者利用 sfdx force:mdapi:deploy -d -u 直接部署 123 sfdx force:mdapi:deploy --deploydir mdapi_output_dir --targetusername username@email.com495048 bytes written to C:\\Users\\youname~1\\AppData\\Local\\Temp\\2\\mdapi_output_dir.zip using 1693.299msDeploying C:\\Users\\youname~1\\AppData\\Local\\Temp\\2\\mdapi_output_dir.zip... 之后会出现状态信息：123456=== StatusStatus: Queuedjobid: 0AfXX00000wgOnhSAEThe deploy request did not complete within the specified wait time [0 minutes].To check the status of this deployment, run &quot;sfdx force:mdapi:deploy:report&quot; 推送默认至org里面： 1sfdx force:source:deploy -p force-app/main/default 如下命令行可以查看部署结果： 1sfdx force:mdapi:deploy:report 资源 【Trailhead 资源】Quick Start: Lightning Web Components，这是官方的Trailhead 教程，建议初学者可以试试做一遍就知道整个开发流程了： https://trailhead.salesforce.com/content/learn/projects/quick-start-lightning-web-components 【Trailhead 资源】这也是官方的Trailhead 教程，教开发者使用SFDX，Get Started with Salesforce DX: https://trailhead.salesforce.com/content/learn/trails/sfdx_get_started 【源码】Sample Gallery: https://trailhead.salesforce.com/sample-gallery 【开发者文档】Lightning Web Components Documentation - Salesforce Lightning Component Library: https://developer.salesforce.com/docs/component-library/documentation/lwc 【开发者文档】Salesforce DX Developer Guide | Salesforce Developers: https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_intro.htm 【源码】这里提供一些Github源码学习：https://github.com/trailheadapps Introduction to Lightning Web Components (LWC) – Apex Hours Introducing DreamHouse, DreamInvest, Pure Aloe and Easy Spaces Sample Apps for Lightning Web Components | Developer Force Blog","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"LWC","slug":"LWC","permalink":"http://tonyrenhk.github.io/tags/LWC/"},{"name":"SFDX","slug":"SFDX","permalink":"http://tonyrenhk.github.io/tags/SFDX/"},{"name":"Lightning Web Components","slug":"Lightning-Web-Components","permalink":"http://tonyrenhk.github.io/tags/Lightning-Web-Components/"}]},{"title":"对Campaign Member Status设置默认值","slug":"2019-01-03-Campaign-Member-Status","date":"2019-01-02T16:00:00.000Z","updated":"2019-04-11T09:59:18.477Z","comments":true,"path":"2019/01/03/2019-01-03-Campaign-Member-Status/","link":"","permalink":"http://tonyrenhk.github.io/2019/01/03/2019-01-03-Campaign-Member-Status/","excerpt":"对Campaign Member Status设置默认值","text":"对Campaign Member Status设置默认值 由于Campaign Member Status在每一次由于Campaign新建的时候的默认值只能是Responded，Sent，而每一次新建一个新的Campaign，都必须添加对应的status，特别麻烦。 我们可以在Campaign的after insert 下面传入新的triggerNew，然后删除系统默认的CampaignMemberStatus，并且添加新的默认值。在这里，我添加四个状态Attended,,Invited,To be Invited。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public without Sharing class CampaignTriggerClass &#123; public Static void routineAfterInsert(List&lt;Campaign&gt; triggerNew )&#123; List &lt;CampaignMemberStatus&gt; CMSDeleteList = new List&lt;CampaignMemberStatus&gt;(); for (CampaignMemberStatus cms: [SELECT id, CampaignID, HasResponded, IsDefault, Label, SortOrder FROM CampaignMemberStatus WHERE CampaignID in :triggerNew])&#123; CMSDeleteList.add(cms); &#125; List &lt;CampaignMemberStatus&gt; CMSList = new List&lt;CampaignMemberStatus&gt;(); for (Campaign c :triggerNew)&#123; CMSList.addAll(GenMemberStatusList(c.id)); &#125; insert CMSList; delete CMSDeleteList; &#125; public static List &lt;CampaignMemberStatus&gt; GenMemberStatusList(string cid)&#123; List &lt;CampaignMemberStatus&gt; NewStatuses = new List&lt;CampaignMemberStatus&gt;(); CampaignMemberStatus c1 = new CampaignMemberStatus(CampaignID = cid, Label = 'To be Invited', IsDefault = true, HasResponded = true, SortOrder = 3); CampaignMemberStatus c2 = new CampaignMemberStatus(CampaignID = cid, Label = 'Invited', IsDefault = false, HasResponded = false, SortOrder = 4); CampaignMemberStatus c3 = new CampaignMemberStatus(CampaignID = cid, Label = 'Confirmed', IsDefault = false, HasResponded = false, SortOrder = 5); CampaignMemberStatus c4 = new CampaignMemberStatus(CampaignID = cid, Label = 'Attended', IsDefault = false, HasResponded = false, SortOrder = 6); NewStatuses.add(c1); NewStatuses.add(c2); NewStatuses.add(c3); NewStatuses.add(c4); return NewStatuses; &#125; &#125;","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Apex","slug":"Apex","permalink":"http://tonyrenhk.github.io/tags/Apex/"},{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"对Campaign","slug":"对Campaign","permalink":"http://tonyrenhk.github.io/tags/对Campaign/"}]},{"title":"SFDX 常用命令以及相关资料","slug":"2019-01-02-SFDX","date":"2019-01-01T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2019/01/02/2019-01-02-SFDX/","link":"","permalink":"http://tonyrenhk.github.io/2019/01/02/2019-01-02-SFDX/","excerpt":"这里会学习到SFDX 常用命令，同时需要具备Git的相关知识。","text":"这里会学习到SFDX 常用命令，同时需要具备Git的相关知识。 SFDX安装1$ npm install sfdx-cli --global 登入Salesforce Org1sfdx force:auth:web:login -d -a DevHub 登入 Sandbox: 1sfdx force:auth:web:login -r https://test.salesforce.com or添加新的Sandbox Login1$ sfdx force:auth:web:login -r https://test.salesforce.com -d -a DevHub 新建DX项目Create a Salesforce DX Project 1sfdx force:project:create --projectname mywork 查看你所拥有的Org123456789101112sfdx force:org:list=== Orgs ALIAS USERNAME ORG ID CONNECTED STATUS ----------- -------------------- -------- ---------------- DD-ORG jdoe@dd-204.com 00D...OEA Connected(D) devhuborg jdoe@mydevhub.com 00D...MAC Connected ALIAS SCRATCH ORG NAME USERNAME ORG ID EXPIRATION DATE ---------- ------------ -------------------------- --------- ---------- my-scratch Your Company test-wvkm5z113@example.com 00D...UAI 2017-06-13(U) scratch208 Your Company test-wvkm5z113@example.com 00D...UAY 2017-06-13 删除non-active 的Scratch Org： 1sfdx force:org:list --clean 设置默认的 Dev Hub 1sfdx force:config:set defaultdevhubusername=org@username.com --global 新建一个Scratch Org123sfdx force:org:create -s -f config/project-scratch-def.json -a dreamhouse-orgorsfdx force:org:create -f config/project-scratch-def.json 成功的结果: 1Successfully created scratch org: 00D0l0000009PENEA2, username: test-im44gkueld8k@example.com 删除一个Scratch Org 1$ sfdx force:org:delete -u test-s6r2le1cgpnd@example.com 设置defaultusername12345$ sfdx force:config:set defaultusername=test-phvqjvms7dsj@example.com=== Set ConfigNAME VALUE─────────────── ─────────────────────────────defaultusername test-phvqjvms7dsj@example.com 打开Scratch Org12$ sfdx force:org:openAccess org 00D0l0000009PENEA2 as user test-im44gkueld8k@example.com with the following URL: https://force-data-1839-dev-ed.cs58.my.sxxxx.com alesforce.com//secur/frontdoor.jsp?sid=00D0l0000009PEN!ARoAQCCFPl.pwPYTXXNszi9rR0Q6CMrJc77771yynXH.jbnJbweH5b19bc_6KXo9BkMtMY1PLz_nY BO9SSEOyQnPnCWAU3gP 用username打开Scratch Org1sfdx force:org:open -u test-phvqjvms7dsj@example.com 推送本地修改至Scratch Org1sfdx force:source:push 拉取所有metadata from Scratch Org1sfdx force:source:pull 添加Permission12345$ sfdx force:user:permset:assign -n Dreamhouse=== Permsets AssignedUSERNAME PERMISSION SET ASSIGNMENT───────────────────────────── ─────────────────────────test-im44gkueld8k@example.com Dreamhouse 导入数据12Administrator@EC2AMAZ-IOQ3I22 MINGW64 ~/my_sfdx_project/dreamhouse-sfdx (my_branch)$ sfdx force:data:tree:import --plan data/sample-data-plan.json 其中，数据格式如下： sample-data-plan.json：12345678910111213141516[ &#123; \"sobject\": \"Broker__c\", \"saveRefs\": true, \"files\": [ \"brokers-data.json\" ] &#125;, &#123; \"sobject\": \"Property__c\", \"resolveRefs\": true, \"files\": [ \"properties-data.json\" ] &#125;] 有两个文件，一个是properties-data.json12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&#123; \"records\": [ &#123; \"attributes\": &#123; \"type\": \"Property__c\", \"referenceId\": \"18HenryStRef\" &#125;, \"Name\": \"Stunning Victorian\", \"Address__c\": \"18 Henry St\", \"City__c\": \"Cambridge\", \"State__c\": \"MA\", \"Zip__c\": \"01742\", \"Price__c\": 975000, \"Title__c\": \"Stunning Victorian\", \"Beds__c\": 4, \"Baths__c\": 3, \"Location__Longitude__s\": -71.11095, \"Location__Latitude__s\": 42.35663, \"Picture__c\": \"https://s3-us-west-1.amazonaws.com/sfdc-demo/realty/house01.jpg\", \"Thumbnail__c\": \"https://s3-us-west-1.amazonaws.com/sfdc-demo/realty/house01sq.jpg\", \"Description__c\": \"Lorem ipsum dolor sit amet\", \"Broker__c\": \"@CarolineBrookerRef\" &#125;, &#123; \"attributes\": &#123; \"type\": \"Property__c\", \"referenceId\": \"24PearlStRef\" &#125;, \"Name\": \"Ultimate Sophistication\", \"Address__c\": \"24 Pearl St\", \"City__c\": \"Cambridge\", \"State__c\": \"MA\", \"Zip__c\": \"02420\", \"Price__c\": 1200000, \"Title__c\": \"Ultimate Sophistication\", \"Beds__c\": 5, \"Baths__c\": 4, \"Location__Longitude__s\": -71.10869, \"Location__Latitude__s\": 42.359103, \"Picture__c\": \"https://s3-us-west-1.amazonaws.com/sfdc-demo/realty/house02.jpg\", \"Thumbnail__c\": \"https://s3-us-west-1.amazonaws.com/sfdc-demo/realty/house02sq.jpg\", \"Description__c\": \"Lorem ipsum dolor sit amet\", \"Broker__c\": \"@MichaelJonesRef\" &#125; ]&#125;``` 另外一个brokers-data.json，格式如下：```json&#123; \"records\": [ &#123; \"attributes\": &#123; \"type\": \"Broker__c\", \"referenceId\": \"CarolineBrookerRef\" &#125;, \"name\": \"Caroline Kingsley\", \"Title__c\": \"Senior Broker\", \"Phone__c\": \"617-244-3672\", \"Mobile_Phone__c\": \"617-244-3672\", \"Email__c\": \"caroline@dreamhouse.demo\", \"Picture__c\": \"https://s3-us-west-1.amazonaws.com/sfdc-demo/people/caroline_kingsley.jpg\" &#125;, &#123; \"attributes\": &#123; \"type\": \"Broker__c\", \"referenceId\": \"MichaelJonesRef\" &#125;, \"name\": \"Michael Jones\", \"Title__c\": \"Senior Broker\", \"Phone__c\": \"617-244-3672\", \"Mobile_Phone__c\": \"617-244-3672\", \"Email__c\": \"michael@dreamhouse.demo\", \"Picture__c\": \"https://s3-us-west-1.amazonaws.com/sfdc-demo/people/michael_jones.jpg\" &#125; ]&#125; 新建metadata package首先新建文件夹mdapi_output_dir： 1$ mkdir mdapi_output_dir 创建package 12$ sfdx force:source:convert -d mdapi_output_dir/ --packagename package_nameSource was successfully converted to Metadata API format and written to the location: C:\\Users\\Administrator\\my_sfdx_project\\dreamhouse-sfdx\\mdapi_output_dir 查看改变1$ ls -lR mdapi_output_dir/ 部署部署目录至沙盒环境可以定义需要跑的测试类 1sfdx force:mdapi:deploy -d mdapioutput_dir/ -u &quot;sandbox_username&quot; -l RunSpecifiedTests -r test1,test2,test3,test4 或者利用 sfdx force:mdapi:deploy -d -u 直接部署 12345678910 sfdx force:mdapi:deploy --deploydir mdapi_output_dir --targetusername username@email.com495048 bytes written to C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\mdapi_output_dir.zip using 1693.299msDeploying C:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\2\\mdapi_output_dir.zip...=== StatusStatus: Queuedjobid: 0Af6F00000wgOnhSAEThe deploy request did not complete within the specified wait time [0 minutes].To check the status of this deployment, run &quot;sfdx force:mdapi:deploy:report&quot; 如下代码查看部署结果1sfdx force:mdapi:deploy:report 转换mdapi:convert Converts metadata retrieved via Metadata API into the source format used in Salesforce DX projects.转换由package.ml拉取的Metadata到DX项目文件的格式： 1sfdx force:mdapi:convert -r mdapipackage/ 获取沙盒的metadata1sfdx force:mdapi:retrieve --retrievetargetdir force-app -k package.xml 或者如下代码，将生成的metadata放在force-app下面： 1sfdx force:mdapi:retrieve --retrievetargetdir force-app -k package.xml --targetusername tony.ren@scmp.com.itdev ## 参考： salesforcedx - Retrieve all metadata from an existing sandbox (for Salesforce DX conversion) - Salesforce Stack Exchange: https://salesforce.stackexchange.com/questions/197186/retrieve-all-metadata-from-an-existing-sandbox-for-salesforce-dx-conversion","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Git","slug":"Git","permalink":"http://tonyrenhk.github.io/tags/Git/"},{"name":"LWC","slug":"LWC","permalink":"http://tonyrenhk.github.io/tags/LWC/"},{"name":"SFDX","slug":"SFDX","permalink":"http://tonyrenhk.github.io/tags/SFDX/"}]},{"title":"Trailhead学习:Lightning Components Basics","slug":"2018-12-22-Lightning-Components-Basics","date":"2018-12-21T16:00:00.000Z","updated":"2019-04-14T10:32:07.753Z","comments":true,"path":"2018/12/22/2018-12-22-Lightning-Components-Basics/","link":"","permalink":"http://tonyrenhk.github.io/2018/12/22/2018-12-22-Lightning-Components-Basics/","excerpt":"【Trailhead学习】开发者2考试解锁之路：”Lightning组件框架专家”(Lightning Component Framework Specialist Superbadge)之Lightning Components Basics 。","text":"【Trailhead学习】开发者2考试解锁之路：”Lightning组件框架专家”(Lightning Component Framework Specialist Superbadge)之Lightning Components Basics 。 该模块为 Aura模块基础(Aura Components Basics)https://trailhead.salesforce.com/en/content/learn/modules/lex_dev_lc_basics 分为如下几个单元： Before You Start Get Started with Lightning Components Create and Edit Lightning Components Attributes and Expressions Handle Actions with Controllers Input Data Using Forms Connect to Salesforce with Server-Side Controllers Connect Components with Events Discover Next Steps 该模块是解锁Lightning Component Framework Specialist Superbadge的第二个Module。其中Lightning Component Framework Specialist Superbadge的链接如下： https://trailhead.salesforce.com/en/content/learn/superbadges/superbadge_lcf 本模块的主要学习目的是：利用Lightning Components中的可重用的组件构建网页版apps。 在开始前(Before You Start)相关学习链接如下：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_prereqs学习开发Lightning components 需要学习JavaScript，对于初学者，可以参考如下链接：JS: The Right Way: http://jstherightway.org/ 题目 Setting Up Your OrgAs part of our challenges for this module, you’ll build a camping list application. You need to do a few more tasks before passing this challenge and continuing. Create an Expense custom object to work with the examples. You probably already have done this. Create a Camping Item custom object to hold the items you need to go camping with the following fields: Name (use the standard name field) Quantity: Number(18, 0) - Required Price: Currency(16, 2) - Required Packed: Checkbox(default: unchecked) 解析题目要求新建一个对象(Object)名字为：Expense，相关信息需要设置如下： Label：Expense Plural Label：Expenses Starts with vowel sound：checked API Name：Expense__c 同时新建四个字段在Expense对象上： Amount (API Name:Amount__c),字段类型：Number(16,2) Client (API Name:Client__c),字段类型：Text(50) Date (API Name:Date__c),字段类型：Date Reimbursed (API Name:Reimbursed__c),字段类型：Checkbox 之后需要新建另外一个对象名字为Camping Item,这里API名字可以为Camping_Item__c。同时，新建三个field:Quantity,Price,Packed。 搞定！ Get Started with Lightning Components相关链接：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_intro 如下是Lightning Components框架，其设计师为了连接Salesforce与lightning平台。 题目一：Which of the following descriptions about the Lightning Component framework is true?A) It’s a UI framework for developing web apps for mobile and desktop devices.B) It uses JavaScript on the client side and Apex on the server side.C) It’s a modern framework for building single-page applications.D) All of the above 解析： Lightning Component适用于移动端和PC端，同时前端是JS，后端是APEX。所以答案是D 题目二：What can you build with the Lightning Component framework?A) Standalone appB) Components to use inside Visualforce pagesC) Drag-and-drop components for Lightning App BuilderD) All of the above 解析：本题考查Lightning Component适合应用的场景。D。 题目三：How is Lightning Components different from other web app frameworks? A) Lightning Components is optimized for both mobile and desktop experiences and proves it with Salesforce1 and Lightning Experience.B) Lightning Components connects natively with services provided by the Salesforce platform.C) Lightning Components has specific opinions about how data access is performed and has specific security requirements.D) All of the above 解析：Lightning Components 和其他框架的不同点。Lightning Components 其设计主要是为了Salesforce服务，也即连接Lightning平台和Salesforce。所以答案是D Create and Edit Aura Components相关链接：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_create 题目： Create a Simple Camping List Lightning Component Create a ‘camping’ component that displays a list of camping supplies that you’ll need for your trip. Compose this component by using other components to increase reusability. Create a campingList component that contains an ordered list of camping supplies that include Bug Spray, Bear Repellant, and Goat Food. Create a campingHeader component that displays Camping List wrapped in an H1 tag with a font size of 18. 要新建三个Lightning Component，分别为’camping’,’campingList’,’campingHeader’ 其中’campingList’，需要列出三个列表Bug Spray, Bear Repellant, 和 Goat Food。 1234567&lt;aura:component &gt; &lt;ol&gt; &lt;li&gt;Bug Spray&lt;/li&gt; &lt;li&gt;Bear Repellant&lt;/li&gt; &lt;li&gt;Goat Food&lt;/li&gt; &lt;/ol&gt;&lt;/aura:component&gt; 同时新建一个’campingHeader’ 123&lt;aura:component &gt; &lt;h1&gt;Camping List&lt;/h1&gt;&lt;/aura:component&gt; 12345.THIS &#123;&#125;h1.THIS &#123;font-size: 18px;&#125; ‘camping’代码如下： 1234&lt;aura:component &gt; &lt;c:campingHeader/&gt; &lt;c:campingList/&gt;&lt;/aura:component&gt; Attributes and Expressions相关链接：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_attributes_expressions本章主要讲述的是相关属性以及表达式。接下来是下一个题目：Create a Packing List Item Component Create a Lightning Component to display a single item for your packing list. Create a component called campingListItem. Add an attribute named item of type Camping_Item__c that is required. Display Name, Price, Quantity, Packed using an expression. Display Price and Quantity using the appropriate formatted number fields. Display Packed status using a toggle. 题目要求添加一个Camping_Item__c类型，同时定义Price和Quantity为数字字段。这里我们把Price定义为currency字段： 1234567&lt;aura:component &gt; &lt;aura:attribute name=\"item\" type=\"Camping_Item__c\" required=\"true\"/&gt; &lt;ui:outputText value=\"&#123;!v.item.Name&#125;\"/&gt; &lt;lightning:formattedNumber value=\"&#123;!v.item.Price__c&#125;\" style=\"currency\"/&gt; &lt;lightning:formattedNumber value=\"&#123;!v.item.Quantity__c&#125;\" style=\"Number\"/&gt; &lt;lightning:input type=\"toggle\" label=\"Packed\" name=\"togglevalue\" checked=\"&#123;!v.item.Packed__c&#125;\" /&gt; &lt;/aura:component&gt; Handle Actions with Controllers相关链接为：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_controllers 此文主要学习如何使用Controllers 例子下面我们来根据例子实际学习一下如何使用控制器，这里新建一个Lightning Component 命名为helloMessageInteractive：12345678910&lt;aura:component&gt; &lt;aura:attribute name=\"message\" type=\"String\"/&gt; &lt;p&gt;Message of the day: &#123;!v.message&#125;&lt;/p&gt; &lt;div&gt; &lt;lightning:button label=\"You look nice today.\" onclick=\"&#123;!c.handleClick&#125;\"/&gt; &lt;lightning:button label=\"Today is going to be a great day!\" onclick=\"&#123;!c.handleClick&#125;\"/&gt; &lt;/div&gt;&lt;/aura:component&gt; 其中’c’是控制客户端的操作。通过onclick调用客户端handleClick的函数实行控制。 接下来是controller来控制按钮：1234567(&#123; handleClick: function(component, event, helper) &#123; var btnClicked = event.getSource(); // the button var btnMessage = btnClicked.get(\"v.label\"); // the button's label component.set(\"v.message\", btnMessage); // update our message &#125;&#125;) ‘event.getSource()’指向的是用户所点击的按钮属性。之后通过component.set设置客户端的变量”v.message”。 最后还需要新建一个Lightning Application去预览这个组件： 123&lt;aura:application extends=\"force:slds\" &gt; &lt;c:helloMessageInteractive&gt;&lt;/c:helloMessageInteractive&gt;&lt;/aura:application&gt; 题目接下来直接进入题目环节： Mark Item as Packed Add a button to the campingListItem component that when clicked, marks the item as packed. Add a button labeled Packed! that calls the packItem controller function when clicked. The controller function should do the following: Mark the item attribute as packed using a value of true Disable the button by marking the disabled attribute using a value of true 题目要求新建一个按钮，当按钮按下之后，设置Packed为真。1234567891011121314151617&lt;aura:component implements=\"force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId\" access=\"global\" &gt; &lt;!-- item attribute is an instance of Camping_Item__c--&gt; &lt;aura:attribute name=\"item\" type=\"Camping_Item__c\" description=\"instance of Camping_Item__c object\" required=\"true\" default=\"&#123;Packed__c : false&#125;\" access=\"global\"/&gt; &lt;p&gt; Name: &#123;!v.item.Name&#125; &lt;/p&gt; &lt;p&gt;Price: &lt;lightning:formattedNumber value=\"&#123;!v.item.Price__c&#125;\" style=\"currency\"/&gt; &lt;/p&gt; &lt;p&gt;Quantity: &lt;lightning:formattedNumber value=\"&#123;!v.item.Quantity__c&#125;\"/&gt; &lt;/p&gt; &lt;p&gt; &lt;lightning:input type=\"toggle\" label=\"Packed ?\" name=\"Packed\" checked=\"&#123;!v.item.Packed__c&#125;\" /&gt; &lt;/p&gt; &lt;lightning:button label=\"Packed!\" onclick=\"&#123;!c.packItem&#125;\"/&gt;&lt;/aura:component&gt; 同时记得Disable这个按钮。12345678(&#123; packItem : function(component, event, helper) &#123; //set the Packed__c property of the item (instance of Camping_Item__c) attribute component.set(\"v.item.Packed__c\",true); //set the disabled attribute to true event.getSource().set(\"v.disabled\",true); &#125;&#125;) 最后在Lightning Application去预览这个组件：123&lt;aura:application extends=\"force:slds\"&gt; &lt;c:campingListItem item=\"&#123;Price__c: 100, Packed__c: false, Quantity__c: 10, Name:'Test'&#125;\" /&gt;&lt;/aura:application&gt; 最后效果图如下： 搞定！ 最后，关于Lightning组件的其他库函数可以参考如下官方链接：Components - Salesforce Lightning Component Library: https://developer.salesforce.com/docs/component-library/overview/components Input Data Using Forms链接如下： https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_forms 本节讲述的是如何利用Lightning组建构建表单，同时表单的样式使用Salesforce Lightning Design System，简称SLDS。 这里，我们再application里面加入 extends=”force:slds”的属性，就可以使用简称SLDS的库。 我们可以现建立一个如下的 lightning component： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;aura:component&gt; &lt;!-- PAGE HEADER --&gt; &lt;lightning:layout class=\"slds-page-header slds-page-header--object-home\"&gt; &lt;lightning:layoutItem&gt; &lt;lightning:icon iconName=\"standard:scan_card\" alternativeText=\"My Expenses\"/&gt; &lt;/lightning:layoutItem&gt; &lt;lightning:layoutItem padding=\"horizontal-small\"&gt; &lt;div class=\"page-section page-header\"&gt; &lt;h1 class=\"slds-text-heading--label\"&gt;Expenses&lt;/h1&gt; &lt;h2 class=\"slds-text-heading--medium\"&gt;My Expenses&lt;/h2&gt; &lt;/div&gt; &lt;/lightning:layoutItem&gt; &lt;/lightning:layout&gt; &lt;!-- / PAGE HEADER --&gt; &lt;!-- NEW EXPENSE FORM --&gt; &lt;lightning:layout&gt; &lt;lightning:layoutItem padding=\"around-small\" size=\"6\"&gt; &lt;!-- CREATE NEW EXPENSE --&gt; &lt;div aria-labelledby=\"newexpenseform\"&gt; &lt;!-- BOXED AREA --&gt; &lt;fieldset class=\"slds-box slds-theme--default slds-container--small\"&gt; &lt;legend id=\"newexpenseform\" class=\"slds-text-heading--small slds-p-vertical--medium\"&gt; Add Expense &lt;/legend&gt; &lt;!-- CREATE NEW EXPENSE FORM --&gt; &lt;form class=\"slds-form--stacked\"&gt; &lt;lightning:input aura:id=\"expenseform\" label=\"Expense Name\" name=\"expensename\" value=\"&#123;!v.newExpense.Name&#125;\" required=\"true\"/&gt; &lt;lightning:input type=\"number\" aura:id=\"expenseform\" label=\"Amount\" name=\"expenseamount\" min=\"0.1\" formatter=\"currency\" step=\"0.01\" value=\"&#123;!v.newExpense.Amount__c&#125;\" messageWhenRangeUnderflow=\"Enter an amount that's at least $0.10.\"/&gt; &lt;lightning:input aura:id=\"expenseform\" label=\"Client\" name=\"expenseclient\" value=\"&#123;!v.newExpense.Client__c&#125;\" placeholder=\"ABC Co.\"/&gt; &lt;lightning:input type=\"date\" aura:id=\"expenseform\" label=\"Expense Date\" name=\"expensedate\" value=\"&#123;!v.newExpense.Date__c&#125;\"/&gt; &lt;lightning:input type=\"checkbox\" aura:id=\"expenseform\" label=\"Reimbursed?\" name=\"expreimbursed\" checked=\"&#123;!v.newExpense.Reimbursed__c&#125;\"/&gt; &lt;lightning:button label=\"Create Expense\" class=\"slds-m-top--medium\" variant=\"brand\" onclick=\"&#123;!c.clickCreate&#125;\"/&gt; &lt;/form&gt; &lt;!-- / CREATE NEW EXPENSE FORM --&gt; &lt;/fieldset&gt; &lt;!-- / BOXED AREA --&gt; &lt;/div&gt; &lt;!-- / CREATE NEW EXPENSE --&gt; &lt;/lightning:layoutItem&gt; &lt;/lightning:layout&gt; &lt;!-- / NEW EXPENSE FORM --&gt;&lt;/aura:component&gt; 这里的lightning component用到了lightning:layout，同时设置了size=”6” ，那么对应道HTML里面的div会占用页面宽度的 50%，总数为12。lightning:input是输入框里面的相关属性和HTML类似，如min是最小值。这里出现一个aura:id是在每一个tag里面的唯一的id同时，新建一个application： 12345&lt;aura:application extends=\"force:slds\"&gt; &lt;!-- This component is the real \"app\" --&gt; &lt;c:expenses/&gt;&lt;/aura:application&gt; 效果图如下： 下面进入题目环节： Create a Form to Enter New Items In this challenge you’ll create a form to enter new items, a list to display the items entered, and add SLDS styling. First, to make our camping list look more appealing, change the campingHeader component to use lightning:layout and SLDS. Similar to the unit, style the Camping List H1 inside the slds-page-header. Add the action:goal SLDS icon using lightning:icon. Next, modify the campingList component to contain a new item input form and an iteration of campingListItem components for displaying the items entered. Here are additional details for the modifications to the campingList component. Add an attribute named items with the type of an array of camping item custom objects. Add an attribute named newItem of type Camping_Item__c with default quantity and price values of 0. The component displays the Name, Quantity, Price, and Packed form fields with the appropriate input component types and values from the newItem attribute. The Quantity field accepts a number that’s at least 1. Submitting the form executes the action clickCreateItem in the JavaScript controller. If the form is valid, the JavaScript controller pushes the newItem onto the array of existing items, triggers the notification that the items value provider has changed, and resets the newItem value provider with a blank sObjectType of Camping_Item__c. For this challenge, place the code in your component’s controller, not the helper. 题目需要开发者写一个输入的表单，同时展示所有输入的记录。这里我们可以使用SLDS样式，如lightning:icon。 现在开始先写campingList 组件，也是主体部分。需要设置Camping_Item__c的quantity和price的默认值都为0。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869&lt;aura:component &gt; &lt;aura:attribute name=\"items\" type=\"Camping_Item__c[]\"/&gt; &lt;aura:attribute name=\"newItem\" type=\"Camping_Item__c\" default=\"&#123;'Name':'', 'Quantity__c':0, 'Price__c':0, 'Packed__c':false, 'sobjectType':'Camping_Item__c'&#125;\"/&gt; &lt;!-- NEW Campaing FORM --&gt; &lt;div class=\"slds-col slds-col--padded slds-p-top--large\"&gt; &lt;c:campingHeader/&gt; &lt;div aria-labelledby=\"newCampaingForm\"&gt; &lt;!-- BOXED AREA --&gt; &lt;fieldset class=\"slds-box slds-theme--default slds-container--small\"&gt; &lt;legend id=\"newCampaingForm\" class=\"slds-text-heading--small slds-p-vertical--medium\"&gt; Add Expense &lt;/legend&gt; &lt;!-- CREATE NEW Campaing FORM --&gt; &lt;form class=\"slds-form--stacked\"&gt; &lt;!-- For Name Field --&gt; &lt;lightning:input aura:id=\"expenseform\" label=\"Camping Name\" name=\"expensename\" value=\"&#123;!v.newItem.Name&#125;\" required=\"true\"/&gt; &lt;!-- For Quantity Field --&gt; &lt;lightning:input type=\"number\" aura:id=\"campingform\" label=\"Quantity\" name=\"expenseamount\" min=\"1\" value=\"&#123;!v.newItem.Quantity__c&#125;\" messageWhenRangeUnderflow=\"Enter minimum 1 Quantity\"/&gt; &lt;!-- For Price Field --&gt; &lt;lightning:input aura:id=\"campingform\" label=\"Price\" formatter=\"currency\" name=\"expenseclient\" value=\"&#123;!v.newItem.Price__c&#125;\" /&gt; &lt;!-- For Check Box --&gt; &lt;lightning:input type=\"checkbox\" aura:id=\"campingform\" label=\"Packed\" name=\"expreimbursed\" checked=\"&#123;!v.newItem.Packed__c&#125;\"/&gt; &lt;lightning:button label=\"Create Camping\" class=\"slds-m-top--medium\" variant=\"brand\" onclick=\"&#123;!c.clickCreateItem&#125;\"/&gt; &lt;/form&gt; &lt;!-- / CREATE NEW EXPENSE FORM --&gt;&lt;/fieldset&gt; &lt;!-- / BOXED AREA --&gt; &lt;/div&gt; &lt;!-- / CREATE NEW EXPENSE --&gt; &lt;/div&gt; &lt;!-- ITERATIING ITEM LISTS --&gt; &lt;div class=\"slds-card slds-p-top--medium\"&gt; &lt;c:campingHeader/&gt; &lt;section class=\"slds-card__body\"&gt; &lt;div id=\"list\" class=\"row\"&gt; &lt;aura:iteration items=\"&#123;!v.items&#125;\" var=\"item\"&gt; &lt;c:campingListItem item=\"&#123;!item&#125;\"/&gt; &lt;/aura:iteration&gt; &lt;/div&gt; &lt;/section&gt; &lt;/div&gt; &lt;!-- / ITERATIING ITEM LISTS --&gt;&lt;/aura:component&gt; 接下来需要写一个clickCreateItem函数处理当提交上来的数据，将数据传入newItem中。同时将原来的Camping_Item__c里面的值清空。这里只需要写controller就够了，helper文件就不需要了。 12345678910111213141516171819202122(&#123; clickCreateItem : function(component, event, helper) &#123; var validCamping = component.find('campingform').reduce(function (validSoFar, inputCmp) &#123; // Displays error messages for invalid fields inputCmp.showHelpMessageIfInvalid(); return validSoFar &amp;&amp; inputCmp.get('v.validity').valid; &#125;, true); if(validCamping)&#123; var newCampingItem = component.get(\"v.newItem\"); //helper.createCamping(component,newCampingItem); var campings = component.get(\"v.items\"); var item = JSON.parse(JSON.stringify(newCampingItem)); campings.push(item); component.set(\"v.items\",campings); component.set(\"v.newItem\",&#123; 'sobjectType': 'Camping_Item__c','Name': '','Quantity__c': 0, 'Price__c': 0,'Packed__c': false &#125;); &#125; &#125;&#125;) 接下来需要写campingHeader函数，展示camping的头信息。 12345678910111213&lt;aura:component &gt; &lt;lightning:layout class=\"slds-page-header slds-page-header--object-home\"&gt; &lt;lightning:layoutItem &gt; &lt;lightning:icon iconName=\"action:goal\" alternativeText=\"My Camping\"/&gt; &lt;/lightning:layoutItem&gt; &lt;lightning:layoutItem padding=\"horizontal-small\"&gt; &lt;div class=\"page-section page-header\"&gt; &lt;h1 class=\"slds-text-heading--label\"&gt;Camping&lt;/h1&gt; &lt;h2 class=\"slds-text-heading--medium\"&gt;My Camping&lt;/h2&gt; &lt;/div&gt; &lt;/lightning:layoutItem&gt; &lt;/lightning:layout&gt;&lt;/aura:component&gt; 最后的campingListItem 组件可以沿用上一章节‘Handle Actions with Controllers’里面的代码。 最后新建一个Camping.app， 123&lt;aura:application extends=\"force:slds\" &gt;&lt;c:campingList /&gt;&lt;/aura:application&gt; 打开Camping.app，效果如下： 就这样，又拿了500分！ Connect to Salesforce with Server-Side Controllers相关链接如下：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_server 使用服务器端控制器连接到Salesforce我们可以参考如下图，在前端，通过View展示给用户，并且通过JS的Controller实现与Salesforce的服务器端控制器进行连接。 在上一章节中，我们提及了利用Lightning组建构建表单，相关架构图如下， 整个组建由Create按钮开始，该按钮连接到clickCreate动作处理程序。当操作处理程序运行时，它从表单字段（2）中获取值，然后将新expense添加到expense数组（3）。 当通过set更新array时，它会触发组建自动重新列出expense清单（4）。 从Salesforce查询数据接着上面的框架图，如何实现在应用启动时加载现有数据列表(如expense)？可以参考如下代码： 123456789public with sharing class ExpensesController &#123; // STERN LECTURE ABOUT WHAT'S MISSING HERE COMING SOON @AuraEnabled public static List&lt;Expense__c&gt; getExpenses() &#123; return [SELECT Id, Name, Amount__c, Client__c, Date__c, Reimbursed__c, CreatedDate FROM Expense__c]; &#125;&#125; 一种更为常见的调用方法可以如下。直接通过soql传入查询语句如select id from Account实现动态查询。 12345678910111213141516@AuraEnabledpublic static List&lt;sObject&gt; QueryRecord(String soql)&#123; List&lt;sObject&gt; sobjs = new List&lt;sObject&gt;(); sobjs= Database.query(soql); return sobjs;&#125;``` “Aura”是Lightning Components核心的开源框架的名称。同时，该 static的关键词。所有@AuraEnabled 控制器方法必须是static方法，并且要么适用 public 要么 global范围。值得注意的另一件事是，该方法对Lightning组件的数据打包没有任何特殊作用，它只是直接返回SOQL查询结果。## 从Salesforce加载数据那么我们怎么通过Aura Components 加载相关的数据呢？首先，我们需要在&lt;aura:component&gt;中写入相关的class，如下：```XML&lt;aura:component controller=\"ExpensesController\"&gt; 其实，指向Apex控制器实际上并不加载任何数据，也不会调用远程方法。根据上面图示，我们还需要在js调用相关的controller方法(method)。 首先，我们需要在View层定义一开始js跑的函数。如下图所示，我们调用了js端的doInit函数。1&lt;aura:handler name=\"init\" action=\"&#123;!c.doInit&#125;\" value=\"&#123;!this&#125;\"/&gt; 调用服务器端控制器方法接下来我看看如何通过js调用服务器端控制器，可以通过component.get(“c.getExpenses”)定义所需要调用的方法。其中，C代表着客户端控制器。 1234567891011121314151617// Load expenses from SalesforcedoInit: function(component, event, helper) &#123; // Create the action var action = component.get(\"c.getExpenses\"); // Add callback behavior for when response is received action.setCallback(this, function(response) &#123; var state = response.getState(); if (state === \"SUCCESS\") &#123; component.set(\"v.expenses\", response.getReturnValue()); &#125; else &#123; console.log(\"Failed with state: \" + state); &#125; &#125;); // Send action off to be executed $A.enqueueAction(action);&#125; 值得注意的是，如果是component.get(“v.something”)，代表着在js在前端View层拿数据。action.setCallback（…）的代码块，它将在远程方法调用返回数据时运行。最后，通过$A.enqueueAction(action);实现完整的调用。通过确定state为SUCCESS之后，将返回的结果由response.getReturnValue()取出。之后赋值给v.expenses。 学了了Aura基本框架之后，我们来看看如下挑战： 使用服务器端控制器保存和加载记录 使用服务器端控制器将记录保留到数据库。该campingList部件载荷现有的记录，当它启动和提交表单时保存记录到数据库中。 使用getItems方法和saveItem方法创建一个CampingListController Apex类。 添加一个doInit初始化处理程序，在组件启动时从数据库加载现有记录。 修改JavaScript控制器以使用帮助程序中的createItem方法从有效的表单提交中将记录保存到数据库。新项目将添加到控制器的项目值提供程序中。 首先根据需要，先需要创建一个CampingListController.cls ，同时需要写两个方法：getItems方法和saveItem方法。可以参考如下代码： 或者如下链接：https://gitlab.com/snippets/1807867 getItems方法是获取数据，saveItem方法是保存数据。 campingList.cmp 可以参考如下代码： 或者如下链接：https://gitlab.com/snippets/1807867 CampingListController.js然后在前端加载一个doInit初始化处理程序：可以参考如下代码： 或者如下链接：https://gitlab.com/snippets/1807868在组件启动时从数据库调用getItems获得现有记录 同时需要写保存数据的方法，可以参考CampingListHelper.js可以参考如下代码： 或者如下链接：https://gitlab.com/snippets/1807869 Connect Components with Events相关链接如下：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_events 接下来我们学习如何在component中使用event。下面这个例子展示了如何通过component发送event： 12345678&lt;lightning:input type=\"toggle\" label=\"Reimbursed?\" name=\"reimbursed\" class=\"slds-p-around--small\" checked=\"&#123;!v.expense.Reimbursed__c&#125;\" messageToggleActive=\"Yes\" messageToggleInactive=\"No\" onchange=\"&#123;!c.clickReimbursed&#125;\"/&gt; 这里使用了lightning:input这个标签，同时定义了类型为type=”toggle”，也就是开关类型。当用户点击了这个开关，会触发clickReimbursed事件，下面是clickReimbursed事件，会新建一个event名字为updateExpense。同时传入expense 参数。 12345678(&#123; clickReimbursed: function(component, event, helper) &#123; var expense = component.get(\"v.expense\"); var updateEvent = component.getEvent(\"updateExpense\"); updateEvent.setParams(&#123; \"expense\": expense &#125;); updateEvent.fire(); &#125;&#125;) 接下来定义一个event，其中event有两种类型，组件和应用程序类型。这里我们使用的是组件事件，名字为expensesItemUpdate。 123&lt;aura:event type=\"COMPONENT\"&gt; &lt;aura:attribute name=\"expense\" type=\"Expense__c\"/&gt;&lt;/aura:event&gt; 那么如何发送一个event呢？这里我们需要注册一个event，加上如下代码在expenseItem 组件中。如下代码的意思是埋在本组件里面会触发一个event，名字是updateExpense，其类型为c:expensesItemUpdate。 1&lt;aura:registerEvent name=\"updateExpense\" type=\"c:expensesItemUpdate\"/&gt; 发送了event之后，该如何在主component里面处理呢？ 如下代码展示了在主组件expenses中，添加一个aura:handler，接收来自expensesItemUpdate的event，同时会触发一个新的函数handleUpdateExpense。 12&lt;aura:handler name=\"updateExpense\" event=\"c:expensesItemUpdate\" action=\"&#123;!c.handleUpdateExpense&#125;\"/&gt; 接下来我们看看handleUpdateExpense如何拿到相关event传过来的参数，直接使用event.getParam(“expense”)获取参数，传给helper函数进行相关处理。 1234handleUpdateExpense: function(component, event, helper) &#123; var updatedExp = event.getParam(\"expense\"); helper.updateExpense(component, updatedExp);&#125; 最后，updateExpense 的方法可以如下。 12345678910111213updateExpense: function(component, expense) &#123; var action = component.get(\"c.saveExpense\"); action.setParams(&#123; \"expense\": expense &#125;); action.setCallback(this, function(response)&#123; var state = response.getState(); if (state === \"SUCCESS\") &#123; // do nothing! &#125; &#125;); $A.enqueueAction(action);&#125; 学习了event如何操作之后，我们来查看相关挑战： Refactor Components and Communicate with EventsRefactor the input form for camping list items into its own component and communicate with component events. Replace the HTML form in the campingList component with a new campingListForm component that calls the clickCreateItem JavaScript controller action when clicked. The campingList component listens for a c:addItemEvent event and executes the action handleAddItem in the JavaScript controller. The handleAdditem method saves the record to the database and adds the record to the items value provider. The addItemEvent event is of type component and has a Camping_Item__c type attribute named item. The campingListForm registers an addItem event of type c:addItemEvent. The campingListFormController JavaScript controller calls the helper’s createItem method if the form is valid. The campingListFormHelper JavaScript helper creates an addItem event with the item to be added and then fires the event. It then resets the newItem value provider with a blank sObjectType of type Camping_Item__c. 使用新的campingListForm组件替换campingList组件中的HTML表单，该组件在单击时调用clickCreateItem JavaScript控制器操作。 campingList组件侦听c：addItemEvent事件并在JavaScript控制器中执行操作handleAddItem。该handleAdditem方法保存记录到数据库中并添加记录到的物品价值提供商。 该addItemEvent事件类型的成分和有一个名为Camping_Item__c类型属性的项目。 campingListForm注册了一个类型为c的addItem事件：addItemEvent。 如果表单有效，campingListFormController JavaScript控制器将调用帮助程序的createItem方法。 campingListFormHelper JavaScript帮助程序使用要添加的项创建addItem事件，然后触发事件。然后，它使用类型为Camping_Item__c的空白sObjectType 重置newItem值提供程序。 相关代码如下： addItemEvent.evt123&lt;aura:event type=\"APPLICATION\" description=\"Event template\" &gt; &lt;aura:attribute name=\"item\" type=\"Camping_Item__c\"/&gt;&lt;/aura:event&gt; 在主组件里面campingList.cmp，这里需要引用&lt;c:campingListForm /&gt;,同时添加aura:handler接收来自campingListForm的event，同时触发handleAddItem函数处理。123456789101112131415161718192021222324252627282930313233343536&lt;aura:component controller=\"CampingListController\" implements=\"force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId,force:lightningQuickAction\" access=\"global\" &gt; &lt;aura:handler name=\"init\" action=\"&#123;!c.doInit&#125;\" value=\"&#123;!this&#125;\"/&gt; &lt;aura:handler name=\"addItem\" event=\"c:addItemEvent\" action=\"&#123;!c.handleAddItem &#125;\"/&gt; &lt;aura:attribute name=\"items\" type=\"Camping_Item__c[]\"/&gt; &lt;ol&gt; &lt;li&gt;Bug Spray&lt;/li&gt; &lt;li&gt;Bear Repellant&lt;/li&gt; &lt;li&gt;Goat Food&lt;/li&gt; &lt;/ol&gt; &lt;!-- PAGE HEADER --&gt; &lt;c:campingHeader /&gt; &lt;lightning:layout &gt; &lt;lightning:layoutItem padding=\"around-small\" size=\"6\"&gt; &lt;c:campingListForm /&gt; &lt;/lightning:layoutItem&gt; &lt;/lightning:layout&gt; &lt;c:campingHeader /&gt; &lt;div class=\"slds-card slds-p-top--medium\"&gt; &lt;header class=\"slds-card__header\"&gt; &lt;h3 class=\"slds-text-heading--small\"&gt;Items&lt;/h3&gt; &lt;/header&gt; &lt;section class=\"slds-card__body\"&gt; &lt;div id=\"list\" class=\"row\"&gt; &lt;aura:iteration items=\"&#123;!v.items&#125;\" var=\"items\"&gt; &lt;c:campingListItem item=\"&#123;!item&#125;\"/&gt; &lt;/aura:iteration&gt; &lt;/div&gt; &lt;/section&gt; &lt;/div&gt; &lt;/aura:component&gt; 这里附上campingListController.js代码： 1234567891011121314151617181920212223242526272829303132333435363738(&#123; // Load expenses from Salesforce doInit: function(component, event, helper) &#123; // Create the action var action = component.get(\"c.getItems\"); // Add callback behavior for when response is received action.setCallback(this, function(response) &#123; var state = response.getState(); if (state === \"SUCCESS\") &#123; component.set(\"v.items\", response.getReturnValue()); &#125; else &#123; console.log(\"Failed with state: \" + state); &#125; &#125;); // Send action off to be executed $A.enqueueAction(action); &#125;, handleAddItem: function(component, event, helper) &#123; var newItem = event.getParam(\"item\"); var action = component.get(\"c.saveItem\"); action.setParams(&#123;\"item\": newItem&#125;); action.setCallback(this, function(response)&#123; var state = response.getState(); if (component.isValid() &amp;&amp; state === \"SUCCESS\") &#123; var items = component.get(\"v.items\"); items.push(item); component.set(\"v.items\",items); &#125; &#125;); $A.enqueueAction(action); &#125; &#125;) 在campingListForm.cmp中，我们注册一个Event，名字为addItem 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;aura:component implements=\"force:appHostable,flexipage:availableForAllPageTypes,flexipage:availableForRecordHome,force:hasRecordId\" access=\"global\" &gt; &lt;aura:attribute name=\"newItem\" type=\"Camping_Item__c\" default=\"&#123; 'sobjectType': 'Camping_Item__c', 'Name': '', 'Quantity__c': 0, 'Price__c': 0, 'Packed__c': false &#125;\"/&gt; &lt;aura:registerEvent name=\"addItem\" type=\"c:addItemEvent\"/&gt; &lt;lightning:layout &gt; &lt;lightning:layoutItem padding=\"around-small\" size=\"6\"&gt; &lt;div aria-labelledby=\"newcampaignform\"&gt; &lt;fieldset class=\"slds-box slds-theme--default slds-container--small\"&gt; &lt;legend id=\"newcampaignform\" class=\"slds-text-heading--small slds-p-vertical--medium\"&gt; Add Campaign List &lt;/legend&gt; &lt;form class=\"slds-form--stacked\"&gt; &lt;lightning:input aura:id=\"campaignform\" label=\"Campaign Item Name\" name=\"campaignitemname\" value=\"&#123;!v.newItem.Name&#125;\" required=\"true\"/&gt; &lt;lightning:input type=\"number\" aura:id=\"expenseform\" label=\"Quantity\" name=\"campaignitemprice\" min=\"1\" formatter=\"number\" step=\"0.1\" value=\"&#123;!v.newItem.Quantity__c&#125;\" messageWhenRangeUnderflow=\"Enter quantity that's at least 1.\"/&gt; &lt;lightning:input type=\"number\" aura:id=\"expenseform\" label=\"Price\" name=\"campaignitemprice\" min=\"0.1\" formatter=\"currency\" step=\"0.01\" value=\"&#123;!v.newItem.Price__c&#125;\" messageWhenRangeUnderflow=\"Enter an amount that's at least $0.10.\"/&gt; &lt;lightning:input type=\"checkbox\" aura:id=\"expenseform\" label=\"Packed?\" name=\"expreimbursed\" checked=\"&#123;!v.newItem.Packed__c&#125;\"/&gt; &lt;lightning:button label=\"Create Camping\" class=\"slds-m-top--medium\" variant=\"brand\" onclick=\"&#123;!c.clickCreateItem&#125;\"/&gt; &lt;/form&gt; &lt;/fieldset&gt; &lt;/div&gt; &lt;/lightning:layoutItem&gt; &lt;/lightning:layout&gt;&lt;/aura:component&gt; 当按钮lightning:button按下时候，触发clickCreateItem函数，在campingListFormController.js里面，同时会调用helper.createItem。 12345678910111213(&#123; clickCreateItem: function(component, event, helper) &#123; var validCamping = component.find('campingform').reduce(function (validSoFar, inputCmp) &#123; // Displays error messages for invalid fields inputCmp.showHelpMessageIfInvalid(); return validSoFar &amp;&amp; inputCmp.get('v.validity').valid; &#125;, true); if(validCamping)&#123; var addItm = event.getParam(\"v.newItem\"); helper.createItem(component, addItm); &#125; &#125;&#125;) 当campingListFormHelper.js中，触发event时候，会调用名字为addItem的注册event。 123456789101112(&#123; addItem : function(component, campaign) &#123; var createEvent = component.getEvent(\"addItem\"); createEvent.setParams(&#123; \"item\": campaign &#125;); createEvent.fire(); component.set(\"v.newItem\",&#123; 'sobjectType': 'Camping_Item__c', 'Name': '', 'Quantity__c': 0, 'Price__c': 0, 'Packed__c': false &#125;); &#125;&#125;) Discover Next Steps相关链接如下：https://trailhead.salesforce.com/content/learn/modules/lex_dev_lc_basics/lex_dev_lc_basics_next_steps 相关题目： What does SLDS stand for? A) Salesforce Leadership Does Surf B) System Limits Detection System C) Salesforce Lightning Design System D) sObject Loading Data System 答案：去官网看看https://www.lightningdesignsystem.com/，所以答案是B What are Lightning Events used for? A) Salesforce mini developer conferences B) Communicating between loosely coupled components C) Logging critical details during app runtime D) Scheduling sales calls in Lightning Experience 答案：Lightning Events主要用于连接component。所以答案是B 相关参考文献： Events | Lightning Aura Components Developer Guide | Salesforce Developers: https://developer.salesforce.com/docs/atlas.en-us.lightning.meta/lightning/intro_events.htm What is the name of the open-source framework that Lightning Components is based on? A) AuraB) AngularC) jQueryD) WebObjects 答案：本文所有内容都是围绕Aura而展开的。所以答案是A。 In which language do you write Lightning Components action handlers? A) JavaB) VisualforceC) JavaScriptD) Objective-C 答案：Lightning Components action 主要是用JavaScript写的，所以答案是C。 就这样我们成功拿下Lightning Components Basics整个模块： 参考文献: Lightning Apps Developer Center: https://developer.salesforce.com/developer-centers/lightning-apps/","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Trailhead","slug":"Trailhead","permalink":"http://tonyrenhk.github.io/tags/Trailhead/"},{"name":"开发者II考试","slug":"开发者II考试","permalink":"http://tonyrenhk.github.io/tags/开发者II考试/"}]},{"title":"Trailhead学习:解锁Lightning Experience Development","slug":"2018-12-21-Lightning-Experience-Development","date":"2018-12-20T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/12/21/2018-12-21-Lightning-Experience-Development/","link":"","permalink":"http://tonyrenhk.github.io/2018/12/21/2018-12-21-Lightning-Experience-Development/","excerpt":"【Trailhead学习】开发者2考试解锁之路：”Lightning组件框架专家”(Lightning Component Framework Specialist Superbadge)之Lightning Experience Development 。","text":"【Trailhead学习】开发者2考试解锁之路：”Lightning组件框架专家”(Lightning Component Framework Specialist Superbadge)之Lightning Experience Development 。 在之前的学习中，我们相继解锁了 Apex Specialist, Data Integration Specialist，现在开始解锁”Lightning组件框架专家”(Lightning Component Framework Specialist Superbadge)， 相关链接如下：https://trailhead.salesforce.com/en/content/learn/superbadges/superbadge_lcf 同时，这里，附上开发者2考试路线图，链接如下：https://trailhead.salesforce.com/content/learn/superbadges/superbadge_aap 下面我们讲述新的模块，Lightning Experience Development，这里会学习到新的UX对于Apex，Visualforce，API等的影响。相关链接如下https://trailhead.salesforce.com/content/learn/modules/lex_dev_overview User Interface Development Considerations这一节 (User Interface Development Considerations)，章节链接如下https://trailhead.salesforce.com/content/learn/modules/lex_dev_overview/lex_dev_overview_future 题目1. Which of the following statements is true about creating apps with Visualforce: A)Visualforce is designed primarily for page-centric web apps. B)Visualforce renders the page on the server. C)Visualforce will be fully supported by Salesforce for years to come. D)All of the above. 解析： Visualforce 至今都被Salesforce广泛支持。所以选择D。 题目2 Which of the following statements is NOT true about creating apps with Lightning components: A) Lightning components are designed primarily for app-centric web apps. B) Lightning components can be used everywhere Visualforce can be used. C) Lightning components render the page on the client. D) All of the above. 解析：关于利用Lightning components新建app不正确的是B，任何地方使用Lightning components，都可以用Visualforce，显然不对。 题目3 Which of the following is a poor use of Lightning Components: A) Developing an app for Salesforce1. B) Developing a highly interactive app with an innovative user interface. C) Developing widgets for use in Lightning App Builder. D) None of the above. All of these are good use cases for Lightning Components. 解析：哪一些是使用Lightning Components不好的例子，答案是D，没有不好的例子。如开发Salesforce1，或Lightning App Builder里面的widgets，都需要用到Lightning Components。 搞定！ Use Visualforce in Lightning Experience下面一节讲的是在Lightning中使用Visualforce(Use Visualforce in Lightning Experience），相关链接如下：https://trailhead.salesforce.com/content/learn/modules/lex_dev_overview/lex_dev_overview_visualforce 就两道题目，很简单 题目一：Which of the following features of Visualforce do NOT work in Lightning Experience: A) Creating custom apps and tabs. B) Overriding standard actions with Visualforce pages. C) Using window.location in JavaScript code. D) Remote Objects. 解析：Lightning Experience 是一个全新的世界，由于无法直接访问’window ‘全局对象，所以答案是C。例如，Visualforce 覆盖标准操作在 Lightning Experience 和Salesforce Classic会有点不同，同时开发人员可以在Salesforce Classic、Lightning Experience 和移动设置不同的覆盖行为。具体而言，开发人员可以为Salesforce Classic中的大多数标准和所有自定义对象覆盖如下六种标准操作： 对象选项卡(Object tab） 对象列表(Object list) 数据视图Record view) 数据编辑(Record edit) 新建数据(Record create) 删除数据(Record delete) 在Lightning Experience中，前面两项被合并到一个页面：object home。 题目二 ：Which of the following is NOT true about the user interface and visual design in Lightning Experience: A) PDFs render with the Lightning Experience visual design. B) You can’t hide the Lightning Experience main navigation header or sidebar. C) The &lt; apex:inputField &gt; tag renders with the Salesforce Classic appearance. D) The standard Visualforce header and sidebar are hidden. 解析： 我们可以在Salesforce Classic，通过Visualforce pages生成PDF，根据官方说法，截止发稿时，还无法利用 Lightning Experience设计渲染PDF页面，所以答案是A。 成功拿到100分。 Use Lightning Components in Lightning Experience相关链接：https://trailhead.salesforce.com/content/learn/modules/lex_dev_overview/lex_dev_overview_lightning_components 题目一：Which of the following statements about Lightning Components and Lightning Experience is true? A) Lightning Experience is something you use directly, Lightning Components are something you build apps with. B) Lightning Experience is (mostly) built with Lightning Components. C) Lightning Experience uses an app-centric development model using Lightning Components. D) All of the above. 解析：答案是D，Lightning Components 很多时候是用于Lightning Experience。 题目二：Which of the following is true of Lightning Components: A) Lightning Components can only be used in the Lightning Experience and not the Salesforce1 mobile app. B) Lightning Components can be used in Visualforce pages. C) Lightning Components are only optimized for the desktop experience. D)All of the above. 解析： Lightning Components 可以用于Visualforce pages,通过’$Lightning.use’可以实现。所以答案是B。 Salesforce Partners, Packaging, and AppExchange下一章讲到Salesforce Partners, Packaging, and AppExchange，相关链接为：https://trailhead.salesforce.com/content/learn/modules/lex_dev_overview/lex_dev_overview_isv 题目一：Which of the following ISV features are available in Lightning Experience? A) Channel Order App. B) Trialforce. C) Usage Metrics Visualization app. D) Package creation. E) None of the above are available. 解析：package manager是可以在Lightning Experience里面使用的 D。这里值得注意的是，对于ISV，如下模块是支持Classic和Lightning Experience。 Environment Hub License Management App (LMA) Checkout Management App (CMA)然而如下模块就不支持，仅仅支持Classic： Trialforce Channel Order App (COA) Usage Metrics Visualization App 題目二：As an ISV, which of the following is true about AppExchange: A) Your apps undergo a review for Lightning Experience readiness. B) Your apps are available to all customers, whether they have enabled Lightning Experience or not. C) The ‘Lightning Ready’ certification lets AppExchange visitors know your app is verified for Lightning Experience. D) All of the above. 解析：作为ISV，你的APP是对所有用户，无论对方是不是使用Lightning，所以答案是D，以上所有。 在这里附上ISVforce Guide：https://developer.salesforce.com/docs/atlas.en-us.216.0.packagingGuide.meta/packagingGuide/packaging_intro.htm 搞定! Understand Changes to Other Development Tools下面一节讲述Understand Changes to Other Development Tools，相关链接为：https://trailhead.salesforce.com/content/learn/modules/lex_dev_overview/lex_dev_overview_other 题目一：Which of the following is true of Apex in the new Lightning Experience: A) You have to update the API version for all your Apex classes in order for them to work in Lightning Experience. B) Apex is not supported in the new Lightning Experience. C) Your Apex code and queries continue to function as before. D) All of the above 解析：Apex是支持Lightning Experience，而Lightning Experience是不需要更新所有Apex 类的版本。所以本题答案为C。 题目二：What should you look for when reviewing your installed packages before using them with Lightning Experience? A) A ‘Lightning Ready’ sash for the package on AppExchange. B) An error message saying the package isn’t ‘Lightning Ready’. C) A ‘Lightning Ready’ check mark on the Installed Packages page. D) Errors in the JavaScript console when using the package. 解析：如果你的组织是使用Lightning Experience。而当管理员在选择安装app时候，需要看这个app在AppExchange里面是否被标注为’Lightning Ready’ sash，所以本题答案为A。 就这样，整个’Lightning Experience Development’模块被我们解锁了~","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Lightning","slug":"Lightning","permalink":"http://tonyrenhk.github.io/tags/Lightning/"},{"name":"Trailhead","slug":"Trailhead","permalink":"http://tonyrenhk.github.io/tags/Trailhead/"},{"name":"开发者II考试","slug":"开发者II考试","permalink":"http://tonyrenhk.github.io/tags/开发者II考试/"}]},{"title":"Trailhead学习:Data Integration Specialist Superbadge","slug":"2018-12-05-Data-Integration-Specialist-Superbadge","date":"2018-12-04T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/12/05/2018-12-05-Data-Integration-Specialist-Superbadge/","link":"","permalink":"http://tonyrenhk.github.io/2018/12/05/2018-12-05-Data-Integration-Specialist-Superbadge/","excerpt":"Trailhead学习：Data Integration Specialist Superbadge","text":"Trailhead学习：Data Integration Specialist Superbadge 欲破解该Superbadge需要先破解Lightning Flow模块，相关链接如下： https://trailhead.salesforce.com/en/content/learn/superbadges/superbadge_integration 需安装如下’Data Integration Specialist Superbadge’ package： https://login.salesforce.com/packaging/installPackage.apexp?p0=04t41000001T3kx Configure outbound application and integration security题目要求如下： Install the unmanaged package from the prework if you haven’t already. Configure a named credential and remote site according to the specifications outlined in the business requirements. Enter the billing service credentials in the custom setting. 在设置(Setup)下-&gt;安全性控制 -&gt;远程站点设置, 远程站点名称设置为BillingService，远程站点 URL为：http://sb-integration-bs.herokuapp.com 在安全性控制中添加新的命名凭证: * 标签：ProjectService * 名称：ProjectService * URL：https://sb-integration-pms.herokuapp.com/projects * 身份类型：命名首要 * 验证协议：密码验证 * 用户名：pmsUser1 * 密码：pmsUser1 * 生成授权标题：打上勾√ 添加连接的应用程序：API 名称设置为ProjectService，系统会生成一个’客户键’和’消费者秘密’。然后在如下链接测试你的链接https://sb-integration-pms.herokuapp.com. 结果会在URL体现出来，同时,会得到一个Token，成功的URL会如下：https://sb-integration-pms.herokuapp.com/test?success=true 在Custom Setting添加一条记录ServiceCredentials，名字是BillingServiceCredential，username是bsUser1，Password是bsPass1。 Configure inbound integration security题目要求如下Configure the PMS Connected App according to the specifications outlined in the business requirements. Then register the connected app with the Org Registration Heroku app and test the connection. Enter the project service security token into the custom setting. 基于上面一题得到的Token，在Custom Setting中的ServiceTokens加一条名字为ProjectServiceToken的记录 Synchronize Salesforce opportunity data with Square Peg’s PMS external systemBuild a Process Builder process on the opportunity object to invoke an Apex REST callout to the external PMS as outlined in the requirements section.本题考查的是进程生成器(Process Builder)调用Apex类。 同时，需要在业务机会(Opportunity) Type字段加一个新的选项’New Project’ Apex 类如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657public class ProjectCalloutService &#123; //method to be invoked by ProcessBuilder apex @InvocableMethod public static void postOpportunityToPMS(List&lt;Id&gt; oppoIds)&#123; Opportunity opp = [SELECT Id,Name,Account.Name,CloseDate,Amount FROM Opportunity WHERE Id = :oppoIds[0]]; String serviceToken = ServiceTokens__c.getValues('ProjectServiceToken').Token__c; String jsonInput = '&#123;\\n' + ' \"opportunityId\" : \"'+opp.Id+'\",\\n'+ ' \"opportunityName\" : \"'+opp.Name+'\",\\n'+ ' \"accountName\" : \"'+opp.Account.Name+'\",\\n'+ ' \"closeDate\" : \"'+String.ValueOf(opp.CloseDate).mid(0,10)+'\",\\n'+ ' \"amount\" : \"'+opp.Amount+'\"\\n&#125;'; System.enqueueJob(new QueueablePMSCall(serviceToken, jsonInput, opp.Id)); &#125; class QueueablePMSCall implements System.Queueable, Database.AllowsCallouts&#123; private String serviceToken; private String jsonInput; private Id oppId; public QueueablePMSCall(String serviceToken, String jsonInput, Id oppId)&#123; this.serviceToken = serviceToken; this.jsonInput = jsonInput; this.oppId = oppId; &#125; public void execute(QueueableContext qc)&#123; postToPMS(serviceToken, jsonInput, oppId); &#125; &#125; @Future(callout=true) private static void postToPMS(String serviceToken, String jsonInput, Id oppoId)&#123; HTTPRequest req = new HTTPRequest(); req.setEndPoint('callout:ProjectService'); req.setMethod('POST'); req.setHeader('token',serviceToken); req.setHeader('Content-Type', 'application/json;charset=UTF-8'); req.setBody(jsonInput); HTTP http = new HTTP(); HTTPResponse res = http.send(req); Opportunity opp = new Opportunity(Id=oppoId); if(res.getStatusCode() == 201)&#123; opp.StageName = 'Submitted Project'; System.debug('Success: ' + res.getStatus()); &#125;else&#123; opp.StageName = 'Resubmit Project'; System.debug('Failure: ' + res.getStatusCode() + ' ' + res.getStatus()); &#125; update opp; &#125;&#125; 之后需要新建一个进程生成器(Process Builder) ，可以命名为Update Opportunity with Opportunity object selection. 总图为： 选择Opportunity，中间判断条件可以设置为：Opportunity Type with stage change 下面是用进程生成器(Process Builder)调用Apex类 Test outbound Apex REST callout logicBuild tests for your Apex outbound service logic using the included stubs (ProjectCalloutServiceMock and ProjectCalloutServiceMockFailure) and callout test class (ProjectCalloutServiceTest) in the package. You must have 90% test coverage to pass this challenge and assert values to prove that your logic is working as expected. 基于上一题写一个测试类，同时要求90%代码覆盖率。成功例子 1234567891011121314@isTestglobal class ProjectCalloutServiceMock implements HttpCalloutMock&#123; //Implement http mock callout here // Implement this interface method global HTTPResponse respond(HTTPRequest request)&#123; // Create a fake response HttpResponse response = new HttpResponse(); response.setHeader('Content-Type', 'application/json'); response.setStatus('OK'); response.setStatusCode(201); return response; &#125;&#125; 失败的例子 1234567891011121314@isTestglobal class ProjectCalloutServiceMockFailure implements HttpCalloutMock&#123; //Implement http mock callout here // Implement this interface method global HTTPResponse respond(HTTPRequest request)&#123; // Create a fake response HttpResponse response = new HttpResponse(); response.setHeader('Content-Type', 'application/json'); response.setStatus('Bad Response'); response.setStatusCode(500); return response; &#125;&#125; 最后写测试类，其中testSetupdata是新建测试数据。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162@isTestprivate class ProjectCalloutServiceTest &#123; //Implement mock callout tests here @testSetup static void testSetupdata()&#123; //create the opportunity record Opportunity opp1 = new Opportunity(); opp1.Name = 'Test Opp1'; opp1.Type = 'New Project'; opp1.Amount = 100; opp1.CloseDate = Date.today(); opp1.StageName = 'Submitted Project'; insert opp1; //create the opportunity record Opportunity opp2 = new Opportunity(); opp2.Name = 'Test Opp2'; opp2.Type = 'New Project'; opp2.Amount = 200; opp2.CloseDate = Date.today(); opp2.StageName = 'Resubmit Project'; insert opp2; //create the Custom Settings ServiceTokens__c servToken = new ServiceTokens__c(); servToken.Name = 'ProjectServiceToken'; servToken.Token__c = 'qwertyuiopnjhgft'; insert servToken; &#125; @isTest static void testSuccessMessage()&#123; Opportunity opp = [Select Id, Name FROM Opportunity WHERE Name = 'Test Opp1' Limit 1]; List&lt;Id&gt; lstOfOppIds = new List&lt;Id&gt;(); lstOfOppIds.add(opp.Id); // Set mock callout class Test.setMock(HttpCalloutMock.class, new ProjectCalloutServiceMock()); // This causes a fake response to be sent // from the class that implements HttpCalloutMock. Test.startTest(); ProjectCalloutService.postOpportunityToPMS(lstOfOppIds); Test.stopTest(); // Verify that the response received contains fake values opp = [select StageName from Opportunity where id =: opp.Id]; System.assertEquals('Submitted Project',opp.StageName); &#125; @isTest static void testFailureMessage()&#123; Opportunity opp = [Select Id, Name FROM Opportunity WHERE Name = 'Test Opp2' Limit 1]; List&lt;Id&gt; lstOfOppIds = new List&lt;Id&gt;(); lstOfOppIds.add(opp.Id); // Set mock callout class Test.setMock(HttpCalloutMock.class, new ProjectCalloutServiceMockFailure()); // This causes a fake response to be sent // from the class that implements HttpCalloutMock. Test.startTest(); ProjectCalloutService.postOpportunityToPMS(lstOfOppIds); Test.stopTest(); // Verify that the response received contains fake values opp = [select StageName from Opportunity where id =: opp.Id]; System.assertEquals('Resubmit Project',opp.StageName); &#125;&#125; Synchronize external PMS system project data with SalesforceUse the requirements above to implement an Apex REST service to process related project and opportunity data that comes in from the Square Peg external application. Before checking this section, run the service method in the ProjectRESTService class to confirm that it’s working as expected. 本题考查的是如何使得外部系统PMS 的数据和Salesforce保持一致。根据题目要求，需要写一个Apex REST服务类，用于接收外部系统Post过来的数据，获得的数据可以更新或者插入到Salesforce数据库中。写好之后的测试URL可以如下： https://YOUR_INSTANCE.salesforce.com/services/apexrest/project 123456789101112131415161718192021222324252627282930313233343536373839404142@RestResource(urlMapping = '/project/*')global with sharing class ProjectRESTService &#123; @HttpPost global static String postProjectData(String ProjectRef, String ProjectName, String OpportunityId, Date StartDate, Date EndDate, Double Amount, String Status)&#123; String retMsg = 'Error'; SavePoint sp1 = Database.setSavePoint(); try&#123; List&lt;Opportunity&gt; lstOfOpps = new List&lt;Opportunity&gt;(); if(OpportunityId != null &amp;&amp; OpportunityId.trim().length() &gt; 0)&#123; Opportunity opp = [SELECT Id, DeliveryInstallationStatus__c, Discount_Percent__c FROM Opportunity WHERE Id = :OpportunityId]; opp.DeliveryInstallationStatus__c = 'In progress'; lstOfOpps.add(opp); &#125; UPDATE lstOfOpps; List&lt;Project__c&gt; lstOfRrjts = new List&lt;Project__c&gt;(); Project__c prjt = new Project__c(); prjt.ProjectRef__c = ProjectRef; prjt.Name = ProjectName; prjt.Opportunity__c = OpportunityId; prjt.Start_Date__c = StartDate; prjt.End_Date__c = EndDate; prjt.Billable_Amount__c = Amount; prjt.Status__c = Status; lstOfRrjts.add(prjt); UPSERT lstOfRrjts; retMsg = 'OK'; &#125;catch(Exception ex)&#123; Database.rollback(sp1); retMsg = ex.getMessage(); &#125; return retMsg; &#125;&#125; Test inbound Apex REST service logicBuild tests for your Apex REST service logic using the stub for the test class (ProjectRESTServiceTest) in the package. You must have 90% test coverage to pass this challenge and assert values to prove that your logic is working as expected. 写好了Apex 类，现在需要写一个测试类： 1234567891011121314151617181920212223242526272829303132@isTestprivate class ProjectRESTServiceTest &#123; @testSetup static void loadServiceData()&#123; Opportunity opp = new Opportunity(); opp.Name = 'Test Opportunity'; opp.DeliveryInstallationStatus__c = 'In progress'; opp.CloseDate = (Date.today()).addDays(20); opp.StageName = 'Submitted Project'; INSERT opp; Project__c prjt = new Project__c(); prjt.ProjectRef__c = 'ProjectRef'; prjt.Name = 'ProjectName'; prjt.Opportunity__c = opp.Id; prjt.Start_Date__c = Date.today(); prjt.End_Date__c = (Date.today()).addDays(10); prjt.Billable_Amount__c = 1000; prjt.Status__c = 'Running'; INSERT prjt; &#125; @isTest static void testProjectRESTService()&#123; Project__c prjt = [SELECT Id, ProjectRef__c, Name, Opportunity__c, Start_Date__c, End_Date__c, Billable_Amount__c, Status__c FROM Project__c LIMIT 1]; Test.startTest(); Opportunity opp = [SELECT Id FROM Opportunity LIMIT 1]; System.assertEquals(1,[SELECT count() FROM Opportunity]); String returnMessage = ProjectRESTService.postProjectData('ProjectRef', 'ProjectName', String.valueOf(opp.Id), Date.today(), Date.today(), 1000, 'Running'); Test.stopTest(); &#125;&#125; Synchronize Salesforce project data with Square Peg’s external billing systemPerform the necessary steps, as outlined in the requirements, to make an outbound authenticated Apex callout to Square Peg’s external billing system’s SOAP service. To pass this challenge, delete the unused Async process class that is autogenerated from the WSDL AsyncBillingServiceProxy. 下载XML： http://sb-integration-bs.herokuapp.com/ws/invoices.wsdl 在Apex Class 里，点击’ Generate from WSDL’,并生成一个名为BillingServiceProxy 的proxy类。 相关参考链接如下：https://help.salesforce.com/articleView?id=code_wsdl_to_package.htm&amp;type=5 同时题目要求ProjectTrigger 调用 ‘BillingCalloutService.callBillingService()并且传入新旧记录的参数。 1234567891011121314151617181920212223242526public class BillingCalloutService &#123; @future(callout = true) public static void callBillingService(String projectRef, Decimal billingAmount)&#123; ServiceCredentials__c srvcCrd = ServiceCredentials__c.getValues('BillingServiceCredential'); BillingServiceProxy.project projectInst = new BillingServiceProxy.project(); projectInst.username = srvcCrd.Username__c; projectInst.password = srvcCrd.Password__c; projectInst.billAmount = billingAmount; BillingServiceProxy.InvoicesPortSoap11 invPortSoapInst = new BillingServiceProxy.InvoicesPortSoap11(); String response = invPortSoapInst.billProject(projectInst); List&lt;Project__c&gt; lstOfProjects = new List&lt;Project__c&gt;(); if(response != null &amp;&amp; response.equalsIgnoreCase('OK'))&#123; List&lt;Project__c&gt; lstOfPrjts = [SELECT Status__c FROM Project__c WHERE ProjectRef__c = :projectRef]; for(Project__c prjt : lstOfPrjts)&#123; prjt.Status__c = 'Billed'; lstOfProjects.add(prjt); &#125; UPDATE lstOfProjects; &#125; &#125;&#125; Trigger这样写： 123456789trigger ProjectTrigger on Project__c (after update) &#123; if(Trigger.isAfter &amp;&amp; Trigger.isUpdate)&#123; for(Project__c prjt : Trigger.new)&#123; if(prjt.Status__c != null &amp;&amp; prjt.Status__c.equals('Billable'))&#123; BillingCalloutService.callBillingService(prjt.ProjectRef__c, prjt.Billable_Amount__c); &#125; &#125; &#125;&#125; Test outbound Apex SOAP callout logicBuild tests for your SOAP callout and assert proper behavior using the included stubs (BillingCalloutServiceMock and BillingCalloutServiceMockFailure) and callout test class (BillingCalloutServiceTest) in the package. You must have 90% test coverage to pass this challenge and assert values to prove that your logic is working as expected. 12345678@isTestglobal class BillingCalloutServiceMock implements WebServiceMock &#123; global void doInvoke(Object stub,Object request,Map&lt;String, Object&gt; response,String endpoint,String soapAction,String requestName,String responseNS, String responseName,String responseType)&#123; BillingServiceProxy.billProjectResponse_element response_x = new BillingServiceProxy.billProjectResponse_element(); response_x.status = 'OK'; response.put('response_x', response_x); &#125;&#125; 1234567global class BillingCalloutServiceMockFailure implements WebServiceMock &#123; global void doInvoke(Object stub,Object request,Map&lt;String, Object&gt; response,String endpoint,String soapAction, String requestName, String responseNS,String responseName,String responseType) &#123; BillingServiceProxy.billProjectResponse_element response_x = new BillingServiceProxy.billProjectResponse_element(); response_x.status = 'ERROR'; response.put('response_x', response_x); &#125;&#125; 测试类： 123456789101112131415161718192021222324252627282930313233343536373839404142434445@isTestprivate class BillingCalloutServiceTest &#123; @testSetup static void loadData()&#123; Opportunity oppo = new Opportunity(); oppo.Name = 'TestOpp1'; oppo.CloseDate = Date.today(); oppo.StageName = 'Prospecting'; insert oppo; Project__c proj = new Project__c(); proj.Name = 'TestProj1'; proj.Billable_Amount__c = 1000; proj.ProjectRef__c = 'TestRef1'; proj.Status__c = 'Running'; proj.Opportunity__c = oppo.Id; insert proj; ServiceCredentials__c servCred = new ServiceCredentials__c(); servCred.Name = 'BillingServiceCredential'; servCred.Username__c = 'usr1'; servCred.Password__c = 'pwd1'; insert servCred; &#125; @isTest static void testCalloutSuccess()&#123; Test.setMock(WebServiceMock.class, new BillingCalloutServiceMock()); List&lt;Project__c&gt; prjt = [SELECT Status__C FROM Project__c WHERE ProjectRef__c = 'TestRef1']; System.assertEquals(1, prjt.size()); Test.startTest(); prjt[0].Status__c = 'Billable'; update prjt; Test.stopTest(); &#125; @isTest static void testCalloutFailure()&#123; Test.setMock(WebServiceMock.class, new BillingCalloutServiceMockFailure()); List&lt;Project__c&gt; prjt = [SELECT Status__C FROM Project__c WHERE ProjectRef__c = 'TestRef1']; System.assertEquals(1, prjt.size()); Test.startTest(); prjt[0].Status__c = 'Running'; update prjt; Test.stopTest(); &#125;&#125; Synchronize external billing data with Salesforce in real timeConfigure Salesforce Connect to integrate with Square Peg’s external billing system to expose invoice information as children of projects as outlined in the requirements. 根据题目要求，需要设置一个external data source的连接。路径为：setup–&gt;external data source 然后输入如下信息： External Data Source: BillingServiceName: BillingServiceType: Salesforce Connect OData 2.0URL: https://sb-integration-is.herokuapp.com/odataIdentity Type: AnonymousAuthentication Protocol:No Authentication 同时需要新建一个external对象切名字为 “invoices”。 就这样，我们获得了Data Integration Specialist，一次性得到了6500分。 Reference Calega/Data-Integration-Specialist-Superbadge: Data integration specialist superbadge solution.: https://github.com/Calega/Data-Integration-Specialist-Superbadge Salesforce Tips and Tricks for Developer: http://sfdccodepractices.blogspot.com/","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Trailhead","slug":"Trailhead","permalink":"http://tonyrenhk.github.io/tags/Trailhead/"},{"name":"开发者II考试","slug":"开发者II考试","permalink":"http://tonyrenhk.github.io/tags/开发者II考试/"},{"name":"Superbadge","slug":"Superbadge","permalink":"http://tonyrenhk.github.io/tags/Superbadge/"}]},{"title":"hexo-theme-doc主题实现中文搜索","slug":"2018-11-27-hexo-theme-doc-SupportCN","date":"2018-11-26T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/11/27/2018-11-27-hexo-theme-doc-SupportCN/","link":"","permalink":"http://tonyrenhk.github.io/2018/11/27/2018-11-27-hexo-theme-doc-SupportCN/","excerpt":"由于 hexo-theme-doc主题无法实现中文搜索，更新build json 有关代码，实现中文搜索功能。","text":"由于 hexo-theme-doc主题无法实现中文搜索，更新build json 有关代码，实现中文搜索功能。 问题如果你找到这篇文章，说明你已经在使用hexo-theme-doc，并且已经知道hexo是什么和hexo-theme-doc怎么安装了。 hexo-theme-doc是一个很好的帮助文档Theme，页面简洁，可以参考https://github.com/zalando-incubator/hexo-theme-doc 由于项目需要建立帮助文档，所以选择了hexo-theme-doc，但是发现在中文界面下无法使用搜索功能。 在Github向他们提出了有关问题，因为是 lunr.js出了问题，他们好像也没办法，https://github.com/zalando-incubator/hexo-theme-doc/issues/143 解决本次修改的lunr.js的版本是2.1.0，不知道以后会不会支持中文，同时hexo-theme-doc 的版本是1.0.0-rc.1。 hexo-theme-doc搜索的原理是通过lunr.js生成一个lunr.json文件，把hexo post的内容全部变成Json格式，然后检索时候，就在这个Json文件里面寻找。 现在问题就出在这个lunr.json，如果你在博客里面输入中文，那么在生成静态文件时，打开lunr.json文件会发现里面的Json的Body是一大堆乱码。由于这一些乱码，在之后的搜索功能就自然找不到需要的关键字或者文章。 首先要解决build json出来的时候乱码问题，在lib/nodejs/search/build.js下,112行，直接comment掉有关代码 123$(&apos;h1,h2&apos;).each(function() &#123; 。。。&#125;); 这样生成的Json文件的中文字就会正常显示了，相关改动可以参考如下：https://github.com/TonyRenHK/hexo-theme-doc/commit/c543d21a3dbbd79000f99babc98eba6c2fd029e5 由于修改了相关Json文件，所以在生成的search 模块也需要进行相应的修改。这里修改就可以根据实际需要进行修改。修改的文件在 lib/browser/search/components.jsx下。其中SearchForm就是需要修改的search模块。这里把页面也直接翻译成中文页面：1234567891011function SearchResultsTitle(&#123; results, query &#125;) &#123; return ( &lt;div&gt; &lt;h1 className=\"doc-search-results__title\"&gt; 搜索 &lt;span className=\"doc-search-results__title__query\"&gt;\"&#123;query&#125;\"&lt;/span&gt;，&#123; results.length ? results.length+'个' : '没有' &#125; 结果 ： &lt;/h1&gt; &#123; !results.length ? &lt;p&gt;系统未能搜索 \"&#123;query&#125;\"到结果. &lt;strong&gt;试试其他关键字？&lt;/strong&gt;&lt;/p&gt; : null &#125; &lt;/div&gt; );&#125; 同时值得注意的是，搜索检索出来的是整个博客文章body，有时候，需要裁剪有关文章，比如只需要显示先后100个字。这里可以参考如下的cut budy 方法。如下方法仅供参考。 1234567891011121314151617181920212223function generateBody(body, query) &#123; var indexNumber = body.indexOf(query); var bodyLength = body.length; var returnBody = ''; var frontCut = 10; var bodyCut = 100; if (indexNumber &lt; frontCut &amp;&amp; bodyLength &gt; bodyCut) &#123; returnBody = body.substring(0, bodyCut) + '。。。'; &#125; else if (indexNumber &lt; frontCut &amp;&amp; bodyLength &lt; bodyCut) &#123; returnBody = body.substring(0, bodyLength); &#125; else if (indexNumber &gt; frontCut &amp;&amp; bodyLength &gt; (bodyCut + indexNumber)) &#123; returnBody = '。。。' + body.substring(indexNumber - frontCut, bodyCut + indexNumber) + '。。。'; &#125; else if (indexNumber &gt; frontCut &amp;&amp; bodyLength &lt; (bodyCut + indexNumber)) &#123; returnBody = '。。。' + body.substring(indexNumber - frontCut, bodyLength); &#125; //add highlight returnBody = returnBody.replace(new RegExp(query, 'g'), '&lt;span style=\"font-weight: bold;\"&gt;' + query + '&lt;/span&gt;'); return returnBody;&#125; 可以参考最后修改版本的search components： https://github.com/TonyRenHK/hexo-theme-doc/blob/6a11a284a6fb136252744260dd1fdb511e1773c2/lib/browser/search/components.jsx 修改完成之后需要利用Webpack 和 node-sass 进行编译 1$ npm run compile 而编译生成的文件在source/script/doc.js 。 代码有关代码如下： https://github.com/TonyRenHK/hexo-theme-doc 当然，实现中文搜索的方法不唯一，欢迎留言讨论。如上方法仅供参考。 参考文献 olivernn/lunr.js: A bit like Solr, but much smaller and not as bright : https://github.com/olivernn/lunr.js does it support Chinese? · Issue #173 · olivernn/lunr.js : https://github.com/olivernn/lunr.js/issues/173 lunr-languages/lunr.ja.js at master · MihaiValentin/lunr-languages : https://github.com/MihaiValentin/lunr-languages/blob/master/lunr.ja.js Lunr: A bit like Solr, but much smaller and not as bright : https://lunrjs.com/ 为 lunr.js 添加中文支持 | 阿阿燃 : http://linfuyan.com/add-chinese-support-to-lunrjs/ linfuyan/lunr.js: 添加中文支持的 lunr.js。无分词版本 un-participle 分支，分词版本 participle 分支 : https://github.com/linfuyan/lunr.js nandy007/lunr.js: 支持chinese中文搜索的lunr.js : https://github.com/nandy007/lunr.js codepiano/lunr.js: support Chinese. 添加中文支持，使用一个nodejs库来分词，在前端使用时需要先dump索引文件，在前端引用 : https://github.com/codepiano/lunr.js lunr-languages/lunr.ja.js at master · MihaiValentin/lunr-languages : https://github.com/MihaiValentin/lunr-languages/blob/master/lunr.ja.js","categories":[{"name":"hexo","slug":"hexo","permalink":"http://tonyrenhk.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://tonyrenhk.github.io/tags/hexo/"},{"name":"hexo-theme-doc","slug":"hexo-theme-doc","permalink":"http://tonyrenhk.github.io/tags/hexo-theme-doc/"}]},{"title":"Trailhead学习:Lightning Flow","slug":"2018-11-26-Lightning-Flow","date":"2018-11-25T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/11/26/2018-11-26-Lightning-Flow/","link":"","permalink":"http://tonyrenhk.github.io/2018/11/26/2018-11-26-Lightning-Flow/","excerpt":"Trailhead学习：Data Integration Specialist Superbadge中的Lightning Flow章节。","text":"Trailhead学习：Data Integration Specialist Superbadge中的Lightning Flow章节。 Choose the Right Automation Tool这里解析Data Integration Specialist Superbadge中的Lightning Flow章节的’选择正确的自动化工具’(Choose the Right Automation Tool)，相关链接如下： https://trailhead.salesforce.com/content/learn/modules/business_process_automation/process_whichtool 学习Lightning Flow和Cloud Flow Designer，还有Process Builder有什么区别呢？ Lightning Flow 是产品的名字 Process Builder 和Cloud Flow Designer 是工具的名字 管理员可以用Process Builder制作Process; 可以用Cloud Flow Designer 制作flows. 利用Process Builder 和Cloud Flow Designer，Lightning Flow可以让你实现如下功能： 使用一个页面创建指导教程或向导。 设置自动化任务(tasks)和流程(process)。使用Process Builder或Cloud Flow Designer可以声明业务流程配置逻辑和操作。 如果需要，可以构建自定义Apex代码以实现相关功能。 连接外部系统 为页面和应用添加自动化功能。 可以不断重用之前所见的Process Builder 和Cloud Flow Designer。在Process Builder中，创建一个可调用的流程(invocable process)，以便在其他业务流程中重用该流程的逻辑或操作。在Cloud Flow Designer中，任何flow都可以用作子flow。 题目题目如下： 1) Which tools are included with the Lightning Flow product? A:Lightning Experience and Cloud Flow Designer B:Lightning App Builder and Process Builder C:Process Builder and Cloud Flow Designer D:Process Builder, Cloud Flow Designer, and Approvals 解析：题目问的是Lightning Flow产品包含哪些工具？答案是C。 2) Which declarative tool would you use for the following use case? Guide customers through the process of troubleshooting issues with your product. A) Process Builder B)Cloud Flow Designer C)Approvals D)Apex 解析：哪一个工具可以指导客户完成产品问题排查过程。根据上文功能的第一点，答案是B 3) Which declarative tool would you use for the following use case? When an opportunity’s discount is higher than 40%, notify the CEO via email and request sign-off. Provide a way for the CEO to leave comments. A) Process Builder B)Cloud Flow Designer C)Approvals D)Apex 解析：如果一个opportunity的折扣是高于40%，需要邮件通知CEO，并且CEO留下意见，很显然，这是通过审批流程实现。所以答案是答案是C 4)Which declarative tool would you use for the following use case? When the Annual Revenue field exceeds $500,000 on an account, automatically update the Customer Priority field to High. A) Process Builder B)Cloud Flow Designer C)Approvals D)Apex 解析：当客户的年度收入(Annual Revenue)字段超过500,000美元时，系统会知道将“客户优先级”更新为“高”。根据上文的功能2，可以通过Process Builder可以实现这样逻辑。答案是A。之后的文章会通过实例详细学习如何构建Process Builder。 参考答案链接在此，关于Lightning Flow的答题卡，有需要的话可以参考： https://quizlet.com/298965518/lightning-flow-flash-cards/ Automate Simple Business Processes with Process Builder这里解析Data Integration Specialist Superbadge中的Lightning Flow章节的’Process Builder的简单业务逻辑’(Automate Simple Business Processes with Process Builder)，相关链接如下 https://trailhead.salesforce.com/content/learn/modules/business_process_automation/process_builder 学习Process Builder是一个点击式工具，可让您轻松自动化if / then业务流程，并在构建时查看流程的图形表示。 触发器(trigger)识别什么时候进程(process)可以运行。 对于记录更改过程，触发器决定哪个对象以及下面什么情况，该进程(process)要监听相关数据变动： 只有当数据是新建的时候 任何时候数据被新建或者更新。 条件(Criteria):决定是否执行该操作。在此条件，管理员可以设置如下： 设置过滤条件。 输入自定义公式(formula)。 与验证规则(validation rules)一样，公式必须解析为true或false。 选择退出标准并始终执行相关操作。 操作(Action) ,开发者可以实现如下操作(不完全举例)： 新建数据 更新数据或者其他有关数据 提交审批 发邮件。 *发 Chatter feed. 同时，系统设置了三种Process Types，Process Builder可以自动化几种业务流程。 其主要区别在于生命时候触发触发器(trigger)。 1）Record Change，数据改变 2）Invocable，调用其他Process Builder 3）Platform Event ，平台事件，收到平台事件消息 其中，Lightning Process Builder 相关帮助文档可以参考如下： https://help.salesforce.com/articleView?id=process_overview.htm&amp;type=5 题目原题题目如下： Keep contact addresses in sync with their account’s address You’ve been given a requirement to keep contact addresses in sync with the accounts they belong to. Use Process Builder to create a process on the Account object that updates child Contact addresses when an account’s address is updated. Challenge Requirements: The process can have any name The process must have an Update Records action that updates Contact mailing address fields (Street, City, State, Postal Code, Country) when the parent Account shipping address field values are updated The process must be active 解析题目要求联系人的地址时刻与客户的地址保持一致。具体来说就是当客户的shipping address被更新时候，联系人的mailing address相关字段如Street, City, State, Postal Code, Country)也要被一致更新。 这里我们新建一个Process Builder，名字可以为任意名字。 然后设置如下几步流程， 1）选择Account 无论是被更新还是新建时候都执行该流程2）系统判定Account是否被新建。3）如果是新建的Account，则新建一个Contact，同时设置相关字段值，令Contact mailing address相关字段等于shipping address相关字段。4）判断Account是否被update，注意条件选择OR5）最后，如果Account是更新的话，会同步更新Contact相关字段最后记得要激活该Process Builder。 流(Flow)本章的主题为Guide Users Through Your Business Processes with Cloud Flow Designer，主要学习流(Flow)的制作方法。 相关链接为：https://trailhead.salesforce.com/content/learn/modules/business_process_automation/flow 题目如下： Guide users through creating a leadBuild a flow that creates a lead with user-entered information and uploads a related file for the lead. Then add the flow to a Home page. 具体要求如下：Challenge Requirements: Create a flow: Name: New Lead Type: Screen Flow In the flow, add a screen with these required screen fields. Last Name Company Name In the flow, create a lead record. Use the screen fields to set the lead’s Last Name and Company. Store the lead’s ID in a Text variable called leadId. In the flow, add another screen with a Lightning component screen field. Name the field Upload_File Choose the forceContent:fileUpload Lightning component.*Use the leadId variable to set the component’s Related Record ID attribute. Activate the New Lead flow. Create a new Lightning page: Type: Home page Label: Process Automation Home In Process Automation Home, add a Flow component that references the New Lead flow. Activate the page and set it as the default Home page. 题目解析：题目要求开发者建一个流(Flow),并且输入名字和公司名字，同时实现新建一条Lead的数据。同时实现上传文档的功能。而相关上传的文档是储存于Lead的附件。最后，用户可以在Home 的页面使用流(Flow)。 首先，在流(Flow)里面先新建一个screen。 可以输入名字为screen。 同时，加上需要用户输入的两个field：’Last Name’ 和’Company Name’: 新建’Record Create’的模块。 这里需要新建另外一个变量为’leadId’,是生成新的Lead的时候的Id。也就是下一步需要上传附件时候所对应的leadId。 再填加新的上传附件的lightning component。 设置上传附件的lightning component的变量。 同时，需要设置整个流(Flow)的开始点，点击screen的右上角的绿色按钮。 整个流(Flow)份三个模块如下： 最后保存整个流(Flow)。 保存之后需要激活： 之后，需要在Home 的页面加上该流(Flow)。 路径： SETUP–&gt; Lightning App Builder–&gt;New 选择 ‘Home Page’ 点击’Next’ Label 打上’Process Automation Home’ 点击’Finish’ 在左边选择’Flow’拖至home页面， 就这样，解锁了： Combine the Power of Process Builder and Cloud Flow Designer接下来的主题是’Combine the Power of Process Builder and Cloud Flow Designer’,讲的是如何将进程生成器(Process Builder)和流(Flow)紧密结合起来。 链接如下: https://trailhead.salesforce.com/content/learn/modules/business_process_automation/business_process_automation_combined 进程生成器(Process Builder)不能解决所有的自动化流程的问题。 发布到社区 提交审批 删除数据 新建一系列数据，并使之相互关联 实施复杂的业务逻辑 管理员或者开发者不必在另一个工具中重建整个业务逻辑。 在流(Flow)中配置更复杂的功能，然后向进程生成器(Process Builder)添加流(Flow)操作。 如果流(Flow)也无法满足您的实际业务需求，您或许可以要求有关开发人员可以编写Apex来执行此操作。 同时通过您的流(Flow)来添加Apex操作。 假如，现在有一个需求是需求是：更新closed won的业务机会(opportunity)。由于closed won的业务机会(opportunity)已经完结，需要复制现有的业务机会(opportunity)。 那么该如何实现呢？ 开发人员可以通过进程生成器(Process Builder)复制一个现在已经处于closed won阶段的业务机会(opportunity)，但是如果想复制产品(products)并且将其与新的业务机会(opportunity)产生连接。 在进程生成器(Process Builder)中，我们不能获取新建数据的ID，并用于其他用户。但是我们可以在流(Flow)中应用。对于上述的需求，开发人员可以新建一个流(Flow)，复制业务机会(opportunity)和其对应的产品(products)。同时新建一个进程生成器(Process Builder)当业务机会(opportunity)时处于closed won阶段，自动调用该流(Flow)。 对于流(Flow)的步骤可以如下： 复制业务机会(opportunity) 复制其对应的产品(products) 连接新建的产品(products)和新建的业务机会(opportunity) 下面来做题目。题目如下： 题目1. An sObject variable can store A）A single value B）A set of field values for a single record C）Multiple values of the same data type D）A set of field values for multiple records that have the same object 解析： 问题是一个sObject可以储存什么。B 题目2. For which use case is it appropriate to combine a process and a flow? A）Post to an internal Chatter group. B）Clone a record and its children. C）Delete a related record. D）B and C 解析：什么情况需要结合进程生成器(Process Builder)和流(Flow)操作，根据上面的案例，需要复制master-detail的数据，需要用到答案是D。 题目3.Inside a loop, you should avoid: A）Executing actions, like creating or updating records. B）Assigning new values to variables. C）Displaying data to the user. D）esting another loop. 解析：在一个循环里面，开发者需要避免的是A执行新建或者更新数据的操作。切记，除非开发人员已经确认该循环只执行有限数量次数，任何DML操作都得在循环外面执行。 就这样解锁了。 Customize How Records Get Approved with Approvals本章节讲述的是批准过程(Approval Process)。相关链接如下： https://trailhead.salesforce.com/en/content/learn/modules/business_process_automation/approvals 挑战如下： Make sure that prospect amounts are approved before they’re converted to customers Due to local regulation, new customers must be approved by the legal team. When a user creates an account that has a type of Prospect, they manually submit it for approval by clicking Submit for Approval on the account. The record is evaluated only if its type is Prospect and there are more than 500 employees. When the account enters the approval process, Type gets set to Pending and the record is locked. If approved, Type gets set to Customer and the record is unlocked. If not approved, Type gets set back to Prospect and the record is unlocked. Before You StartVerify that the Account object’s Type field has the following picklist values: Prospect, Customer, Pending. Challenge Requirements:‘ Use the Jump Start Wizard to create a new approval process for the Account object The approval process name must be Approve New Account Pick any email template for approval assignment email template For Entry Criteria, use the following criteria. Account: Type equals Prospect Account: Employees greater than 500 For Approver, choose Automatically assign to approver(s) and assign yourself as the approver Click View Approval Process Detail Page and finish off the remaining requirements. In the Initial Submission section, add a Field Update action that updates the Account: Type field to Pending. The name of the action must be Account Type To Pending. In the Final Approval Actions, add a Field Update action that updates the Account: Type field to Customer. The name of the action must be Account Type To Customer. In the Final Approval Actions section, edit the Record Lock action to unlock the record In the Final Rejection Actions section, add a Field Update action that updates the Account: Type field to Prospect. The name of the action must be Account Type To Prospect Activate the approval process 题目解析 题目要求开发者在客户(Account)对象下新建一个批准过程(Approval Process)，由于法律的需要，在成为真正客户前需要提交法务部门审批，当审批通过后，该客户(Account)会真正成为客户。 开始前需要确认Account 对象中的Type字段需要有Prospect, Customer, Pending这个三个选项，这三个状态在批准过程(Approval Process)会用到。 在SETUP里面输入Approval Processes，然后找到对应到的Acount对象。选择Jump Start Wizard新建一个批准过程(Approval Process)。其中，名字必须设置为Approve New Account。项目条件可以设置为(客户: 类型等于Prospect) 和 (客户: 员工大于500)。 在“初始提交操作”中，需要添加新的字段更新，将客户: 类型更新为Pending状态。 在“最终批准操作”中，需要添加新的字段更新，将客户: 类型更新为Customer状态，同时在‘记录锁定’中选择“取消锁定可以进行编辑”。 在“最终拒绝操作”中，需要添加新的字段更新，将客户: 类型更新为原有的状态Prospect。 最终流程如下： 批准分配电子邮件模板可以任意选择一个。批准人可以设置为自己。 然后点击“启用”按钮，就这样整个批准过程就激活了。然后，我们就这样解锁了Lightning Flow模块： 参考相关参考链接： https://salesforce.stackexchange.com/questions/134054/process-builder-create-a-child-contact-and-keep-it-in-sync-with-parent-account https://technologyflows.com/2015/03/01/process-builder-update-contact-address-from-account/ https://www.youtube.com/watch?v=EhnuJ32Oq6o https://www.youtube.com/watch?v=zBFPcFZ1zSQ https://www.youtube.com/watch?v=sjOWbErHvtY","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Lightning","slug":"Lightning","permalink":"http://tonyrenhk.github.io/tags/Lightning/"},{"name":"Trailhead","slug":"Trailhead","permalink":"http://tonyrenhk.github.io/tags/Trailhead/"},{"name":"开发者II考试","slug":"开发者II考试","permalink":"http://tonyrenhk.github.io/tags/开发者II考试/"}]},{"title":"全民K歌小外挂：自动评论插件","slug":"2018-11-25-WesingPlugins","date":"2018-11-24T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/11/25/2018-11-25-WesingPlugins/","link":"","permalink":"http://tonyrenhk.github.io/2018/11/25/2018-11-25-WesingPlugins/","excerpt":"全民K歌自动评论插件实现自动刷分，自动升级。再也不用手动刷评论了。","text":"全民K歌自动评论插件实现自动刷分，自动升级。再也不用手动刷评论了。 开始全民K歌每评论一次，可以让对方积分分数增加，由于人手手动评论过于费事，所以用了Python自动评论实现自动刷分。这里需要在PC端安装Python和全民K歌桌面版。同时安装pyautogui库。 导入函数导入函数 12345import pyautogui, sys import time from random import randint 设置评论内容1234567891011CommentList = ['Good!!!', 'Nice', 'Wonderful！！！','[em]e7150[/em][em]e7150[/em][em]e7150[/em]', 'Name[em]e179[/em][em]e179[/em][em]e179[/em][em]e179[/em]', '[em]e163[/em][em]e163[/em][em]e163[/em]', '[em]e7054[/em][em]e7054[/em][em]e7054[/em][em]e7054[/em]', '[em]e7038[/em][em]e7038[/em][em]e7038[/em]！！！', 'Good!!!Wonderful!', '[em]e142[/em]！！[em]e142[/em]！'] 刷评论设置循环一千次刷评论。注意这里moveTo是鼠标在屏幕中的位置，可以调整。 1234567for num in range(1,1000): pyautogui.moveTo( 1200, 340, 2) pyautogui.click() pyautogui.typewrite(CommentList[randint(0, 9)]) pyautogui.press('enter') time.sleep(3) 由于全民K歌不能不间断一直评论，所以加了睡眠3秒的等待时间，系统会等3秒之后继续评论。就这样，我们轻轻松松把全民K歌等级推上了17级。 同样原理，可以实现各种刷评论功能。本方法只用于学习用途。","categories":[{"name":"Python","slug":"Python","permalink":"http://tonyrenhk.github.io/categories/Python/"}],"tags":[{"name":"自动","slug":"自动","permalink":"http://tonyrenhk.github.io/tags/自动/"},{"name":"Python","slug":"Python","permalink":"http://tonyrenhk.github.io/tags/Python/"}]},{"title":"Salesforce Apex 学习笔记","slug":"2018-02-01-SalesforceApexStudy","date":"2018-11-24T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/11/25/2018-02-01-SalesforceApexStudy/","link":"","permalink":"http://tonyrenhk.github.io/2018/11/25/2018-02-01-SalesforceApexStudy/","excerpt":"Salesforce Apex tips","text":"Salesforce Apex tips 如何检查数据的Access Right？1SELECT RecordId,HasReadAccess FROM UserRecordAccess WHERE UserId = :userInfo.getUserId() AND RecordId = 'a1H4E000000BYJ1UAO' 如何得到月尾的最后一天？123Date selectedDate = Date.today().addDays(4);Date firstDate = selectedDate.toStartOfMonth();p.Date__c =firstDate.addDays(date.daysInMonth(selectedDate.year() , selectedDate.month()) - 1); 把string 改为 date12Date x = Date.valueOf('2015-8-11'); system.debug('Now '+ x ); 可编辑字段(一)如何获得对象中的可编辑字段123456Map&lt;String, Schema.SObjectField&gt; map = Schema.SObjectType.Custom1__c.fields.getMap();for(String fieldName : map.keySet()) &#123; if(map.get(fieldName).getDescribe().isUpdateable()) &#123; custom1.put(fieldName , 'some value'); &#125;&#125; 可编辑字段(二)下面function获得对象中的所有可编辑字段12345678910111213141516public static String GetUpdateableField(String ObjectName)&#123; String QueryStr= 'select '; String[] types = New List&lt;String&gt;(); types.add(ObjectName); Schema.DescribeSobjectResult[] results = Schema.describeSObjects(types); for(string apiName : results[0].fields.getMap().keySet())&#123; Schema.SObjectField field = results[0].fields.getMap().get(apiName); Schema.DisplayType FldType = field.getDescribe().getType(); //system.debug('apiName : '+ apiName + ' || FldType:'+FldType + '|| is editable : '+field.getDescribe().isUpdateable() ); if(field.getDescribe().isUpdateable())&#123; QueryStr += apiName + ','; &#125; &#125; QueryStr = QueryStr.subString(0, QueryStr.length() - 1) + ' from '+ObjectName; return QueryStr;&#125; 常用代码注释模板如下提供几个模板仅供参考：12345678910111213141516/*+-----------------------+------------------------------------------------------------------------------------+| Author | Your name +-----------------------+------------------------------------------------------------------------------------+| Description | For what? | | | - Object(s) | table name | - Description | what you are doing here? +-----------------------+------------------------------------------------------------------------------------+| Creation Date | 23/12/2016 +-----------------------+------------------------------------------------------------------------------------+| Modifications | 2/2/2017 who - doing what? +-----------------------+------------------------------------------------------------------------------------+| Governor informations | +-----------------------+------------------------------------------------------------------------------------+*/ 123456789101112131415161718192021222324252627/** * @name 名字 * @abstract 申明变量/类/方法 * @access 指明这个变量、类、函数/方法的存取权限 * @author 函数作者的名字和邮箱地址 * @category 组织packages * @copyright 指明版权信息 * @const 指明常量 * @deprecate 指明不推荐或者是废弃的信息MyEclipse编码设置 * @example 示例 * @exclude 指明当前的注释将不进行分析，不出现在文挡中 * @final 指明这是一个最终的类、方法、属性，禁止派生、修改。 * @global 指明在此函数中引用的全局变量 * @include 指明包含的文件的信息 * @link 定义在线连接 * @module 定义归属的模块信息 * @modulegroup 定义归属的模块组 * @package 定义归属的包的信息 * @param 定义函数或者方法的参数信息 * @return 定义函数或者方法的返回信息 * @see 定义需要参考的函数、变量，并加入相应的超级连接。 * @since 指明该api函数或者方法是从哪个版本开始引入的 * @static 指明变量、类、函数是静态的。 * @throws 指明此函数可能抛出的错误异常,极其发生的情况 * @var 定义说明变量/属性。 * @version 定义版本信息 */ 1234567891011121314151617181920212223242526 / ** 文件名：[文件名]* 作者：〈版权〉* 描述：〈描述〉* 修改人：〈修改人〉* 修改时间：YYYY-MM-DD* 修改内容：〈修改内容〉*/``` ```Java / ** 文件名：LogManager.java* 版权：Copyright 2000-2001 Huawei Tech. Co. Ltd. All Rights Reserved.* 描述： WIN V200R002 WEBSMAP 通用日志系统* 修改人：张三* 修改时间：2001-02-16* 修改内容：新增* 修改人：李四* 修改时间：2001-02-26* 修改内容：。。。。。。* 修改人：王五* 修改时间：2001-03-25* 修改内容：。。。。。。 */ 获得字段信息123456789101112131415161718192021222324252627282930 Map &lt; String, Schema.SObjectType &gt; schemaMap = Schema.getGlobalDescribe();Schema.SObjectType ObjectSchema = schemaMap.get('Account_Interface__c');Map &lt; String, Schema.SObjectField &gt; fieldMap = ObjectSchema.getDescribe().fields.getMap();for (String fieldName: fieldMap.keySet()) &#123; String fName = fieldMap.get(fieldName).getDescribe().getLabel(); system.debug('|| fName:'+fName);&#125;``` ## 获得字段类型 ```JavaMap &lt; String, Schema.SObjectType &gt; schemaMap = Schema.getGlobalDescribe();Schema.SObjectType ObjectSchema = schemaMap.get('Account_Interface__c');Map &lt; String, Schema.SObjectField &gt; fieldMap = ObjectSchema.getDescribe().fields.getMap();for (String apiName: fieldMap.keySet()) &#123; Schema.SObjectField field = fieldMap.get(apiName); Schema.DisplayType FldType = field.getDescribe().getType(); system.debug(FldType);&#125; 获得某一个对象的字段类型1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859public static String GetFieldType(Schema.SObjectType ObjectSchema , String FieldAPIName)&#123; Map &lt; String, Schema.SObjectField &gt; fieldMap = ObjectSchema.getDescribe().fields.getMap(); system.debug('FieldAPIName : '+FieldAPIName); Schema.SObjectField field = fieldMap.get(FieldAPIName.toLowercase()); Schema.DisplayType fName = field.getDescribe().getType(); return String.valueOf(fName);&#125;``` ## 动态更新Sobjectpublic static void dynamicUpsert(List&lt;SObject&gt; records, SObjectType sObjectType)&#123; if (sObjectType != null) &#123; String listType = 'List&lt;' + sObjectType + '&gt;'; List&lt;SObject&gt; castRecords = (List&lt;SObject&gt;)Type.forName(listType).newInstance(); castRecords.addAll(records); upsert castRecords; &#125;&#125;``` This also works with Database.upsert for the following signatures:Database.upsert(List&lt;SObject&gt; records)Database.upsert(List&lt;SObject&gt; records, SObjectField externalIdField)Database.upsert(List&lt;SObject&gt; records, Boolean allOrNone)It does not work for the following signature because it causes a compile fail:Database.upsert(List&lt;SObject&gt; records, SObjectField externalIdField, Boolean allOrNone)## 新建File```Java public static void UploadIntoFile(Blob requestBody,String FileName)&#123; try&#123; // select id,Title from ContentDocument //String yourFiles = FileBody;//Lets assume this is your binary string of the files'; datetime myDateTime = datetime.now(); ContentVersion conVer = new ContentVersion(); conVer.ContentLocation = 'S'; // S specify this document is in SF, use E for external files conVer.PathOnClient = 'File.txt'; // The files name, extension is very important here which will help the file in preview. conVer.Title = FileName + String.valueOf(myDateTime) ; // Display name of the files conVer.VersionData = requestBody;//EncodingUtil.base64Decode(yourFiles); // converting your binary string to Blog insert conVer; &#125;catch(dmlException e)&#123; system.debug(e.getMessage()); &#125; &#125; Reference : https://developer.salesforce.com/docs/atlas.en-us.api.meta/api/sforce_api_objects_contentdocument.htm 12345678ContentVersion cont = new ContentVersion();cont.Title = 'Title for this contentVersion';cont.PathOnClient = 'file_' + Datetime.now().getTime() + '.txt';cont.VersionData = Blob.valueOf('My Content in file_' + Datetime.now().getTime() + '.txt');cont.Origin = 'H';insert cont; SQL –&gt;List–&gt; Map1map&lt;id, User&gt; userMap = new map&lt;id, User&gt;([select ID,ManagerId,Manager.Email from User where id in : OwnerIdSet]);","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Apex","slug":"Apex","permalink":"http://tonyrenhk.github.io/tags/Apex/"},{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"}]},{"title":"Google App Script 学习","slug":"2018-11-24-Google-App-Script-Note","date":"2018-11-23T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/11/24/2018-11-24-Google-App-Script-Note/","link":"","permalink":"http://tonyrenhk.github.io/2018/11/24/2018-11-24-Google-App-Script-Note/","excerpt":"Google App Script 是谷歌开发的基于JS的脚本语言，可以广泛应用于Gmail、Maps、Drive、Calendar、Forms等一系列插件中。","text":"Google App Script 是谷歌开发的基于JS的脚本语言，可以广泛应用于Gmail、Maps、Drive、Calendar、Forms等一系列插件中。 如下是在Google App Script开发中的一些总结。 找文件在Google Drive 内，基于文件名需要相关文件，并且取得有关Id。 12345678function GetFileId()&#123;var files = DriveApp.searchFiles(' title contains \"LoginNumber\" '); while (files.hasNext()) &#123; var spreadsheet = SpreadsheetApp.open(files.next()); Logger.log('Found:'+spreadsheet.getId()); &#125;&#125; Spreadsheet获得spreadsheet1var spreadsheet = SpreadsheetApp.openById(\"YourId\"); 拿到sheet的列表方法： 1var sheetList = spreadsheet.getSheets(); 插入新的一些Tab/sheet1spreadsheet.insertSheet(TabTitle); 在sheet中插入一行：12var sheetNewList = spreadsheet.getSheets();sheetNewList[0].appendRow([\"Col1\",\"Col2\",\"Col3\"]);","categories":[{"name":"Google","slug":"Google","permalink":"http://tonyrenhk.github.io/categories/Google/"}],"tags":[{"name":"Google","slug":"Google","permalink":"http://tonyrenhk.github.io/tags/Google/"},{"name":"Google App Script","slug":"Google-App-Script","permalink":"http://tonyrenhk.github.io/tags/Google-App-Script/"}]},{"title":"JSforce使用技巧","slug":"2018-09-28-JSForce-Study","date":"2018-09-27T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/09/28/2018-09-28-JSForce-Study/","link":"","permalink":"http://tonyrenhk.github.io/2018/09/28/2018-09-28-JSForce-Study/","excerpt":"本文有如下几个大主题： 1) 利用JSforce获取和更新Salesforce中的Permission2) 利用JSforce新建字段3) 利用JSforce获取Lightning Components","text":"本文有如下几个大主题： 1) 利用JSforce获取和更新Salesforce中的Permission2) 利用JSforce新建字段3) 利用JSforce获取Lightning Components jsforce官方库如下：https://jsforce.github.io/document/#bulk-api) 如何利用Jsforce获取Salesforce中的PermissionPermission 在Salesforce中有如下metadata： fullName applicationVisibilities classAccesses fieldPermissions label objectPermissions pageAccesses recordTypeVisibilities tabSettings 更新permission首先进行登入 12345var jsforce = require('jsforce'); var conn = new jsforce.Connection(&#123; loginUrl: 'https://login.salesforce.com', version: '36.0' &#125;); 下面演示如何更新一个’ApexControllerName’的apexClass的permission。 1234567891011121314151617conn.login('username', 'password', function(err, res) &#123; if (err) &#123; return console.error(err); &#125; var metadata = &#123; \"fullName\": \"PermissionAPIName\", \"label\": \"Permission Label\", \"classAccesses\": [&#123; \"apexClass\": \"ApexControllerName\", \"enabled\": \"true\" &#125;] &#125;; conn.metadata.update('PermissionSet', metadata, function(err, results) &#123; if (err) &#123; console.error(err); &#125; console.log(results); &#125;); &#125;); 同时，你所使用的user必须是 ModifyAllData permission，否则就会有如下报错 123&#123; [sf:INSUFFICIENT_ACCESS: INSUFFICIENT_ACCESS: use of the Metadata API requires a user with the ModifyAllData permission] name: &apos;sf:INSUFFICIENT_ACCESS&apos;, errorCode: &apos;sf:INSUFFICIENT_ACCESS&apos; &#125; 获取Permission信息123456 conn.query(\"select id,Name,Label,NamespacePrefix,IsOwnedByProfile,Description from PermissionSet where IsOwnedByProfile =false and NamespacePrefix=null \", function(err, result) &#123; if (err) &#123; return console.error(err); &#125; for (var i = 0; i &lt; result.records.length; i++) &#123; console.log(\"permission name : \" + result.records[i].Name); &#125;&#125;); 利用JSforce新建字段如下例子在Account Object下新建一个Auto Number Fields。其中metadata 可以试一个List，也就是说，可以一次性新建多个不同类型的字段。由于这里没有涉及permission, 所以新建的字段是没有permission的。需要再次添加。 1234567891011121314151617181920212223conn.login('username', 'password', function(err, res) &#123; if (err) &#123; return console.error(err); &#125; var metadata = [&#123; fullName: 'Account.AutoNumberFields__c', label: 'Auto Nums', type: 'Text', length: 100 &#125;]; conn.metadata.create('CustomField', metadata, function(err, results) &#123; if (err) &#123; console.error(err); &#125; console.log(results); for (var i = 0; i &lt; results.length; i++) &#123; var result = results[i]; console.log('success ? : ' + result.success); console.log('fullName : ' + result.fullName); &#125; &#125;);&#125;); 至于其他字段，文本区TextArea如下: 123456&#123; fullName: 'Object__c.TextArea__c', label: '文本区', required: false, type: 'TextArea', &#125; 复选框Checkbox如下:1234567&#123; fullName: 'Object__c.Checkbox__c', label: '复选框', type: 'Checkbox', defaultValue: false &#125; 数字 Number,如下: 12345678&#123; fullName: 'Object__c.Number__c', label: '数字', required: false, type: 'Number', precision: 18, scale: 2 &#125; Picklist 如下: 12345678910111213141516171819202122232425262728293031&#123; fullName: 'Object__c.Piklist__c', label: '选题', required: false, type: 'Picklist', picklist: &#123; picklistValues: [&#123; fullName: \"Draft\", default: true &#125;, &#123; fullName: \"Submitted\", default: false &#125;, &#123; fullName: \"Final\", default: false &#125;, &#123; fullName: \"Complete\", default: false &#125;, &#123; fullName: \"Approved\", default: false &#125;, &#123; fullName: \"Rejected\", default: false &#125;, &#123; fullName: \"Closed\", default: false &#125;], sorted: false &#125;&#125; Date 如下: 123456&#123; fullName: 'Object__c.Date__c', label: 'Date', required: false, type: 'Date'&#125; MultiselectPicklist 如下: 123456789101112131415161718192021222324252627282930&#123; fullName: 'Object__c.MultiselectPicklist__c', label: '多选题', required: false, type: 'MultiselectPicklist', visibleLines: 6, picklist: &#123; picklistValues: [&#123; fullName: \"水污染\", default: true &#125;, &#123; fullName: \"大气污染\", default: false &#125;, &#123; fullName: \"植被破坏\", default: false &#125;, &#123; fullName: \"固体废弃物污染\", default: false &#125;, &#123; fullName: \"污染\", default: false &#125;, &#123; fullName: \"核污染\", default: false &#125;], sorted: false &#125;&#125; 利用JSforce获取Lightning Components几个重要SOQL收录如下： 12345SELECT Id,description,apiVersion FROM AuraDefinitionBundle select id, AuraDefinitionBundleId,Format,DefType,Source from AuraDefinition SELECT Id,description,apiVersion,DeveloperName FROM AuraDefinitionBundle 可以利用如下function获得Lightning Components： 123456789101112131415 function FetchLightningComp(inputSQL) &#123; conn.query(inputSQL, function(err, result) &#123; if (err) &#123; return console.error(err); &#125; for (var i = 0; i &lt; result.records.length; i++) &#123; console.log(result.records[i].DefType + '||' + result.records[i].AuraDefinitionBundle.DeveloperName); if (result.records[i].Source != '(hidden)') &#123; //Create Folder CraetingLightningComp(result.records[i]); &#125; &#125; &#125;);&#125; 由于Lightning Components是由js,css一系列组成，所以需要每一个Components建立一个folder： 1234567891011121314//create lightning folder and file function CraetingLightningComp(InputObject) &#123; mkdirp(datetime + '/LightningComponent/' + InputObject.AuraDefinitionBundle.DeveloperName, function(err) &#123; if (err) &#123; console.error(err) &#125; else &#123; if (InputObject.Format === 'JS' || InputObject.Format == 'CSS') &#123; writefile(InputObject.DefType + '.' + InputObject.Format, 'LightningComponent/' + InputObject.AuraDefinitionBundle.DeveloperName, InputObject.Source); &#125; else &#123; writefileVF(InputObject.DefType + '.' + InputObject.Format, 'LightningComponent/' + InputObject.AuraDefinitionBundle.DeveloperName, InputObject.Source); &#125; &#125; &#125;);&#125; 这里的writefile和writefileVF是新建一个文件，具体写法如下：123456789101112131415161718192021function writefile(InputName, MetaType, InputBody) &#123; var beautify = require('js-beautify').js_beautify, fs = require('fs'); var InsertBody = beautify(InputBody, &#123; indent_size: 2 &#125;); fs.writeFile(datetime + '/' + MetaType + '/' + InputName, InsertBody, function(err) &#123; if (err) &#123; return console.log(err); &#125; &#125;);&#125;function writefileVF(InputName, MetaType, InputBody) &#123; var fs = require('fs'); fs.writeFile(datetime + '/' + MetaType + '/' + InputName, InputBody, function(err) &#123; if (err) &#123; return console.log(err); &#125; &#125;);&#125; 如果获得的Lightning Components得数量某一定的值，可能获取不到，这里分开不同的SQL获得对应的Lightning Components 12345678910111213141516function FetchLightningResources(inputSQL) &#123; conn.query(inputSQL, function(err, result) &#123; if (err) &#123; return console.error(err); &#125; console.log(\"fetched: \" + result.records.length); console.log(result); if (result.totalSize &gt; 0) &#123; for (var i = 0; i &lt; result.totalSize; i = i + 200) &#123; console.log(inputSQL + ' offset ' + i); FetchLightningComp(inputSQL + ' offset ' + i); &#125; &#125; &#125;);&#125; 最后相对应的call function可以如下： 12FetchLightningResources('select id, AuraDefinitionBundleId,AuraDefinitionBundle.DeveloperName,Format,DefType,Source from AuraDefinition'); 参考文献 node-salesforce - npm: https://www.npmjs.com/package/node-salesforce","categories":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/categories/Salesforce/"}],"tags":[{"name":"Salesforce","slug":"Salesforce","permalink":"http://tonyrenhk.github.io/tags/Salesforce/"},{"name":"Jsforce","slug":"Jsforce","permalink":"http://tonyrenhk.github.io/tags/Jsforce/"}]},{"title":"JavaScript学习技巧以及相关资料","slug":"2018-09-01-JS-Study-Note","date":"2018-08-31T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/09/01/2018-09-01-JS-Study-Note/","link":"","permalink":"http://tonyrenhk.github.io/2018/09/01/2018-09-01-JS-Study-Note/","excerpt":"记录平时JavaScript使用时候一些技巧和一些相关资料。","text":"记录平时JavaScript使用时候一些技巧和一些相关资料。 jQueryjQuery拿checkbox的值1$(&quot;#isAgeSelected&quot;).is(&apos;:checked&apos;) jQuery拿attribute的值1$(this).attr(&apos;data-id&apos;) Javascript获得前端网址icon的方法12345678var favicon = undefined,nodeList = document.getElementsByTagName(\"link\"); for (var i = 0; i &lt; nodeList.length; i++) &#123; if((nodeList[i].getAttribute(\"rel\") == \"icon\")||(nodeList[i].getAttribute(\"rel\") == \"shortcut icon\")) &#123; favicon = nodeList[i].getAttribute(\"href\"); &#125; &#125; console.log(favicon); 如果在markdown里面，可以把url放在下面代码中： 1![icon](https://cldup.com/dTxpPi9lDf.thumb.png)","categories":[{"name":"JS","slug":"JS","permalink":"http://tonyrenhk.github.io/categories/JS/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://tonyrenhk.github.io/tags/JavaScript/"},{"name":"jQuery","slug":"jQuery","permalink":"http://tonyrenhk.github.io/tags/jQuery/"}]},{"title":"Shell Script 学习收录","slug":"2018-02-03-Shell-Script-Study","date":"2018-02-02T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/02/03/2018-02-03-Shell-Script-Study/","link":"","permalink":"http://tonyrenhk.github.io/2018/02/03/2018-02-03-Shell-Script-Study/","excerpt":"Ubuntu Terminal Script","text":"Ubuntu Terminal Script Cloud9在Cloud9下安装 MongoDB打开 terminal输入下面 command: 1sudo apt-get install -y mongodb-org 如下command使MongoDB跑起来： 123$ mkdir data$ echo 'mongod --bind_ip=$IP --dbpath=data --nojournal --rest \"$@\"' &gt; mongod$ chmod a+x mongod 在根目录下启动 mongodb，使用 mongod script: 1$ ./mongod","categories":[{"name":"Git","slug":"Git","permalink":"http://tonyrenhk.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://tonyrenhk.github.io/tags/Git/"},{"name":"Script","slug":"Script","permalink":"http://tonyrenhk.github.io/tags/Script/"}]},{"title":"Git 常用命令以及相关资料","slug":"2018-02-02-Git-Study","date":"2018-02-01T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/02/02/2018-02-02-Git-Study/","link":"","permalink":"http://tonyrenhk.github.io/2018/02/02/2018-02-02-Git-Study/","excerpt":"Git 学习：Git 和Heroku常用命令以及相关资料。","text":"Git 学习：Git 和Heroku常用命令以及相关资料。 操作流程日常使用git更新提交代码的一般流程是这样的： 在对代码进行了一些修改之后，使用：git add –all将本地所有新增文件添加进版本库。 使用：git commit -m 备注将代码提交到本地版本库。（备注内容没有空格的话不需要加引号） 使用：git pull origin从服务器拉取代码，更新本地版本库。 使用：git push origin将本地版本库推送到服务器。 例子 也可以用如下方法： 1234git add -Agit commit -m &quot;comment&quot;git remote add b1 https://username:password@bitbucket.org/username/repo.gitgit push -u b1 master 如果是在origin master上，可以直接：1git push -u origin master Heroku是这样的：1234git remote set-url origin https://git.heroku.com/AppName.gitgit add .;git commit -am &quot;commenthere&quot;;git push heroku master 这里git pull是相当于是从远程获取最新版本并merge到本地1$ git pull origin master 获得某一个分支： 1git pull origin prefill02 加一整个文件夹1$ git add folderName/* 常用指令Removing a remote 查看当前remote View current remotes1$ git remote –v Remove remote123$ git remote rm destination$ git remote remove destination Change a remote URL1git remote set-url origin https://git.heroku.com/appName.git 拉取指定分支代码 1git clone -b develop XXX 其中develop就是分支的名称 创建创建并切换 branchCreate a new branch123$ git checkout -b feature_branch_name$ git checkout -b 分支名 仅仅切换 branch1git checkout 分支名 创建 tag1git tag 标签名 创建 tag 并备注(备注信息加不加双引号都可以)1git tag -a 标签名 -m 备注信息 创建PGP tag 并备注 1git tag -s 标签名 -m 备注信息 文件贮藏本地改变经常会看到这个。If Your local changes to the following files would be overwritten by merge: Please stash them before you merge.1git reset --hard List Differences 1git status List changes 1git diff 退出:按q即可 Undo git addUndo a git add - remove files staged for a git commit1git reset filename.txt Will remove a file named filename.txt from the current index, the “about to be committed” area, without changing anything else. 删除删除本地 branch / tag1git branch -d 分支名或标签名 删除所有未推送的本地 branch1git fetch -p 仅仅删除某个远程 branch / tag1234git push origin :分支名或标签名orgit push origin --delete 分支名或标签名 推送推送某个 branch / tag1git push origin 分支名或标签名 推送所有 branch1git push --all origin 推送所有 tag1git push --tags 回滚1soft （默认） 只回滚到某个commit，本地代码不变 (不加–soft或–hard默认为–soft) 1git reset --soft 分支名或标签名 hard： 彻底回滚（commit和本地代码都回滚） 1git reset --hard 分支名或标签名 下载、合并分支合并某本地分支到当前分支 1git merge 分支名 合并某远程分支到当前分支 直接合并，慎用。 1git pull origin 远程分支名 下载下载某个远程标签 1git fetch origin tag 远程标签名 合并分支合并某本地分支到当前分支 1git merge 分支名 合并某远程分支到当前分支 直接合并 冲突解决，merge失败时很可能因对同一文件的同时更改，所以必须手动人工解决 取舍代码，确认冲突解决后需要把冲突文件 git add到staged area，运行git status查看所有状态确保无误后再git commit提交，注释好冲突为什么这么解决. 下载某个远程标签:1git pull origin 远程分支名 1git fetch origin tag 远程标签名 合并分支查看远程分支使用如下git命令查看所有远程分支：1git branch -r 拉取远程分支并创建本地分支 方式一 使用如下命令： 1git checkout -b 本地分支名x origin/远程分支名x 使用该方式会在本地新建分支x，并自动切换到该本地分支x。采用此种方法建立的本地分支会和远程分支建立映射关系。 方式二 使用如下命令： 1git fetch origin 远程分支名x:本地分支名x or git fetch origin 远程分支名x 使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。采用此种方法建立的本地分支不会和远程分支建立映射关系。 修改推送者名称 Changing Your Committer Name &amp; Email GloballyYou can run the “git config” command with the –global flag; this will make sure all of your future commits use the given information: $ git config –global user.name “John Doe”$ git config –global user.email “john@doe.org“Changing Your Committer Name &amp; Email per RepositoryIf you want to use special settings only when working in a certain repository, you can simply omit the –global flag. This makes the configuration valid only in that repository: $ git config user.name “John Doe”$ git config user.email “john@doe.org“ 显示username信息1git config --list 设置git的账户名和邮箱12$ git config --global user.name [username]$ git config --global user.email [email] 返回主分支 1git checkout master If you want to rename a branch while pointed to any branch, do:1git branch -m &lt;oldname&gt; &lt;newname&gt; 处理冲突文件Reference: https://confluence.atlassian.com/bitbucket/resolve-merge-conflicts-704414003.html These steps include details for resolving conflicts between two branches in a Git repository. You’ll see references to these placeholders: The directory to the forked repository as &lt;repo_directory&gt;The destination branch as &lt;destination_branch&gt;The source branch as &lt;feature_branch&gt;The file with resolved conflicts as Collapse Make sure you’re in your repository directory.1$ cd ~/&lt;repo_directory&gt; For example, if your repository name is my-repository, the result might look something like this: computer:$ cd ~/my-repositorycomputer:my-repository emmap$ Pull the most recent version of the repository from Bitbucket.1$ git pull Checkout the source branch. $ git checkout &lt;feature_branch&gt; Pull the destination branch into the source branch. At this point, pulling the destination will try to merge it with the source and reveal all the conflicts. 1$ git pull origin &lt;destination_branch&gt; For example, if your destination branch is master, the result will look something like this: 12345computer:my-repository emmap$ git pull origin master * branch master -&gt; FETCH_HEADAuto-merging team_contact_info.txtCONFLICT (content): Merge conflict in team_contact_info.txtAutomatic merge failed; fix conflicts and then commit the result. When you merge two branches with conflicts locally, you’ll get conflict markers in the file when you open your editor. Open the file to resolve the conflict. You can do this using the command line or you can navigate to the file.The file will look something like this: A. The beginning of the change in the HEAD branch. In this case, HEAD represents the active branch into which you’re merging.B. The end of the change in the active branch and the beginning of the change in the non-active branch.C. The end of the change in the non-active branch. Resolve the conflict by doing the following:Remove the change designations added by Git (A, B, and C in the screenshot above).Correct the content.Save the file.The result will look something like this: Add and commit the change. 12$ git add &lt;filename&gt;$ git commit -m&apos;commit message&apos; Push the change to the remote. 1git push origin &lt;feature_branch&gt; When you check the pull request, the pull request will still be open and you’ll no longer see any merge conflicts. 其他还原上一个版本的commit1git reset --hard HEAD~1 一键快速部署1234567891011#Set the timenow=\"$(date)\"#set dynamic variableR=$$gitvar=\"Z\"$Rgit add -Agit commit -m \"$now\"git remote add $gitvar https://username:password@bitbucket.org/username/RepoName.gitgit push -u $gitvar master 表情符号Inspired by dannyfritz/commit-message-emoji See also gitmoji. Commit type Emoji Initial commit 🎉 :tada: :tada: Version tag 🔖 :bookmark: :bookmark: New feature ✨:sparkles: :sparkles: Bugfix 🐛:bug: :bug: Metadata 🔒 :card_index: :card_index: Documentation 📚 :books: :books: Documenting source code :bulb: :bulb: Performance :racehorse: :racehorse: Cosmetic :lipstick: :lipstick: Tests 🚨 :rotating_light: :rotating_light: Adding a test :white_check_mark: :white_check_mark: General update :zap: :zap: Improve format/structure :art: :art: Refactor code ♻️:hammer: :hammer: Removing code/files 🗑️:fire: :fire: Continuous Integration :green_heart: :green_heart: Security :lock: :lock: Upgrading dependencies :arrow_up: :arrow_up: Downgrading dependencies 💩 :arrow_down: :arrow_down: Lint :shirt: :shirt: Translation :alien: :alien: Text :pencil: :pencil: Critical hotfix :ambulance: :ambulance: Deploying stuff :rocket: :rocket: Fixing on MacOS :apple: :apple: Fixing on Linux :penguin: :penguin: Fixing on Windows :checkered_flag: :checkered_flag: Work in progress 🚧:construction: :construction: Adding CI build system :construction_worker: :construction_worker: Analytics or tracking code :chart_with_upwards_trend: :chart_with_upwards_trend: Removing a dependency :heavy_minus_sign: :heavy_minus_sign: Adding a dependency :heavy_plus_sign: :heavy_plus_sign: Docker :whale: :whale: Configuration files :wrench: :wrench: Package.json in JS :package: :package: Merging branches :twisted_rightwards_arrows: :twisted_rightwards_arrows: Bad code / need improv. :hankey: :hankey: Reverting changes :rewind: :rewind: Breaking changes :boom: :boom: Code review changes :ok_hand: :ok_hand: Accessibility :wheelchair: :wheelchair: Move/rename repository :truck: :truck: Other Be creative Github123456echo &quot;# SCMP_SFDC_Pro_2&quot; &gt;&gt; README.mdgit initgit add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://github.com/TonyRenHK/SCMP_SFDC_Pro_2.gitgit push -u origin master Getting &amp; Creating Projects Command Description git init Initialize a local Git repository git clone ssh://git@github.com/[username]/[repository-name].git Create a local copy of a remote repository Basic Snapshotting Command Description git status Check status git add [file-name.txt] Add a file to the staging area git add -A Add all new and changed files to the staging area git commit -m &quot;[commit message]&quot; Commit changes git rm -r [file-name.txt] Remove a file (or folder) Branching &amp; Merging Command Description git branch List branches (the asterisk denotes the current branch) git branch -a List all branches (local and remote) git branch [branch name] Create a new branch git branch -d [branch name] Delete a branch git push origin --delete [branchName] Delete a remote branch git checkout -b [branch name] Create a new branch and switch to it git checkout -b [branch name] origin/[branch name] Clone a remote branch and switch to it git checkout [branch name] Switch to a branch git checkout - Switch to the branch last checked out git checkout -- [file-name.txt] Discard changes to a file git merge [branch name] Merge a branch into the active branch git merge [source branch] [target branch] Merge a branch into a target branch git stash Stash changes in a dirty working directory git stash clear Remove all stashed entries Sharing &amp; Updating Projects Command Description git push origin [branch name] Push a branch to your remote repository git push -u origin [branch name] Push changes to remote repository (and remember the branch) git push Push changes to remote repository (remembered branch) git push origin --delete [branch name] Delete a remote branch git pull Update local repository to the newest commit git pull origin [branch name] Pull changes from remote repository git remote add origin ssh://git@github.com/[username]/[repository-name].git Add a remote repository git remote set-url origin ssh://git@github.com/[username]/[repository-name].git Set a repository’s origin branch to SSH Inspection &amp; Comparison Command Description git log View changes git log --summary View changes (detailed) git diff [source branch] [target branch] Preview changes before merging Reference https://blog.csdn.net/youzhouliu/article/details/52371978 gitmoji | An emoji guide for your commit messages","categories":[{"name":"Git","slug":"Git","permalink":"http://tonyrenhk.github.io/categories/Git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://tonyrenhk.github.io/tags/Git/"}]},{"title":"Chrome 插件：一次性复制链接和标题","slug":"2018-01-10-Chrome-Extensions-Link-and-Title-Copy","date":"2018-01-09T16:00:00.000Z","updated":"2019-04-11T09:59:18.461Z","comments":true,"path":"2018/01/10/2018-01-10-Chrome-Extensions-Link-and-Title-Copy/","link":"","permalink":"http://tonyrenhk.github.io/2018/01/10/2018-01-10-Chrome-Extensions-Link-and-Title-Copy/","excerpt":"Chrome 插件实现快速一次性复制网站链接和标题。","text":"Chrome 插件实现快速一次性复制网站链接和标题。 Chrome 插件很多时候，我们要上网找资料，需要复制网址做收集用途，但是往往只是复制链接而没复制标题。然后过了一段时间，单凭这一些链接，都不知道自己收集了什么网址。如下 Chrome 插件实现快速一次性复制网站链接和标题。 相关代码https://github.com/TonyRenHK/Link_Copy 可以直接安装在谷歌浏览器下使用。","categories":[{"name":"Google","slug":"Google","permalink":"http://tonyrenhk.github.io/categories/Google/"}],"tags":[{"name":"Chrome-Extension","slug":"Chrome-Extension","permalink":"http://tonyrenhk.github.io/tags/Chrome-Extension/"},{"name":"Demo","slug":"Demo","permalink":"http://tonyrenhk.github.io/tags/Demo/"}]}]}